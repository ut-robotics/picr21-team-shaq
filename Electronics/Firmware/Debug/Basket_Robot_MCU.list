
Basket_Robot_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009984  08009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099dc  080099dc  0002019c  2**0
                  CONTENTS
  4 .ARM          00000000  080099dc  080099dc  0002019c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099dc  080099dc  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099dc  080099dc  000199dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  080099e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f4  2000019c  08009b80  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001590  08009b80  00021590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce5a  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394e  00000000  00000000  0003d026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00040978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  00041cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cea  00000000  00000000  00042e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160be  00000000  00000000  00063b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c680e  00000000  00000000  00079c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140426  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  0014047c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000019c 	.word	0x2000019c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800996c 	.word	0x0800996c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a0 	.word	0x200001a0
 8000214:	0800996c 	.word	0x0800996c

08000218 <CDC_On_Receive>:

Command command = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .throwerSpeed = 0, .delimiter = 0}; // (4)

volatile uint8_t isCommandReceived = 0; // (5)

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8)
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fb86 	bl	8009940 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }

  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001b8 	.word	0x200001b8
 8000254:	200001c2 	.word	0x200001c2

08000258 <controlMotor>:

void controlMotor(MotorControl* motorControl, int16_t position){
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	807b      	strh	r3, [r7, #2]

	motorControl->positionChange = position - motorControl->positionPrev;
 8000264:	887a      	ldrh	r2, [r7, #2]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800026c:	b29b      	uxth	r3, r3
 800026e:	1ad3      	subs	r3, r2, r3
 8000270:	b29b      	uxth	r3, r3
 8000272:	b21a      	sxth	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	809a      	strh	r2, [r3, #4]

	motorControl->positionPrev = position;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	887a      	ldrh	r2, [r7, #2]
 800027c:	80da      	strh	r2, [r3, #6]


}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
	...

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f000 fe24 	bl	8000ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000296:	f000 f87d 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029a:	f000 fb69 	bl	8000970 <MX_GPIO_Init>
  MX_TIM1_Init();
 800029e:	f000 f8c7 	bl	8000430 <MX_TIM1_Init>
  MX_TIM2_Init();
 80002a2:	f000 f91f 	bl	80004e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002a6:	f000 f98d 	bl	80005c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80002aa:	f000 f9e1 	bl	8000670 <MX_TIM4_Init>
  MX_TIM16_Init();
 80002ae:	f000 fa6b 	bl	8000788 <MX_TIM16_Init>
  MX_TIM17_Init();
 80002b2:	f000 fae3 	bl	800087c <MX_TIM17_Init>
  MX_USB_Device_Init();
 80002b6:	f008 fe0f 	bl	8008ed8 <MX_USB_Device_Init>
  MX_TIM6_Init();
 80002ba:	f000 fa2f 	bl	800071c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  Feedback feedback = { // (1)
 80002be:	2300      	movs	r3, #0
 80002c0:	803b      	strh	r3, [r7, #0]
 80002c2:	2300      	movs	r3, #0
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	2300      	movs	r3, #0
 80002c8:	80bb      	strh	r3, [r7, #4]
 80002ca:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80002ce:	80fb      	strh	r3, [r7, #6]
        .speed3 = 0,
        .delimiter = 0xAAAA
    };

  // Timer code
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002d0:	2104      	movs	r1, #4
 80002d2:	4824      	ldr	r0, [pc, #144]	; (8000364 <main+0xd8>)
 80002d4:	f004 f8ee 	bl	80044b4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002d8:	2104      	movs	r1, #4
 80002da:	4823      	ldr	r0, [pc, #140]	; (8000368 <main+0xdc>)
 80002dc:	f004 f8ea 	bl	80044b4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002e0:	2104      	movs	r1, #4
 80002e2:	4822      	ldr	r0, [pc, #136]	; (800036c <main+0xe0>)
 80002e4:	f004 f8e6 	bl	80044b4 <HAL_TIM_Encoder_Start>

  // PWM code
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002e8:	2100      	movs	r1, #0
 80002ea:	4821      	ldr	r0, [pc, #132]	; (8000370 <main+0xe4>)
 80002ec:	f003 ff3c 	bl	8004168 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80002f0:	2104      	movs	r1, #4
 80002f2:	481f      	ldr	r0, [pc, #124]	; (8000370 <main+0xe4>)
 80002f4:	f003 ff38 	bl	8004168 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80002f8:	210c      	movs	r1, #12
 80002fa:	481d      	ldr	r0, [pc, #116]	; (8000370 <main+0xe4>)
 80002fc:	f003 ff34 	bl	8004168 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000300:	2100      	movs	r1, #0
 8000302:	481c      	ldr	r0, [pc, #112]	; (8000374 <main+0xe8>)
 8000304:	f003 ff30 	bl	8004168 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000308:	2100      	movs	r1, #0
 800030a:	481b      	ldr	r0, [pc, #108]	; (8000378 <main+0xec>)
 800030c:	f003 ff2c 	bl	8004168 <HAL_TIM_PWM_Start>
  // Timer enabled code

  HAL_TIM_Base_Start_IT(&htim6);
 8000310:	481a      	ldr	r0, [pc, #104]	; (800037c <main+0xf0>)
 8000312:	f003 fe67 	bl	8003fe4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (isCommandReceived) { // (2)
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <main+0xf4>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	2b00      	cmp	r3, #0
 800031e:	d017      	beq.n	8000350 <main+0xc4>
	       isCommandReceived = 0;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <main+0xf4>)
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]

	       HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8000326:	2101      	movs	r1, #1
 8000328:	4816      	ldr	r0, [pc, #88]	; (8000384 <main+0xf8>)
 800032a:	f001 f915 	bl	8001558 <HAL_GPIO_TogglePin>

	       feedback.speed1 = motor1Control.positionChange;
 800032e:	4b16      	ldr	r3, [pc, #88]	; (8000388 <main+0xfc>)
 8000330:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000334:	803b      	strh	r3, [r7, #0]
	       feedback.speed2 = motor2Control.positionChange;
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <main+0x100>)
 8000338:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800033c:	807b      	strh	r3, [r7, #2]
	       feedback.speed3 = motor3Control.positionChange;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <main+0x104>)
 8000340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000344:	80bb      	strh	r3, [r7, #4]

	       CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback));
 8000346:	463b      	mov	r3, r7
 8000348:	2108      	movs	r1, #8
 800034a:	4618      	mov	r0, r3
 800034c:	f008 fe86 	bl	800905c <CDC_Transmit_FS>
	     }
	  HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8000350:	2101      	movs	r1, #1
 8000352:	480c      	ldr	r0, [pc, #48]	; (8000384 <main+0xf8>)
 8000354:	f001 f900 	bl	8001558 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035c:	f000 fe30 	bl	8000fc0 <HAL_Delay>
	  if (isCommandReceived) { // (2)
 8000360:	e7d9      	b.n	8000316 <main+0x8a>
 8000362:	bf00      	nop
 8000364:	20000514 	.word	0x20000514
 8000368:	2000047c 	.word	0x2000047c
 800036c:	200003e4 	.word	0x200003e4
 8000370:	20000560 	.word	0x20000560
 8000374:	200005ac 	.word	0x200005ac
 8000378:	20000430 	.word	0x20000430
 800037c:	200004c8 	.word	0x200004c8
 8000380:	200001c2 	.word	0x200001c2
 8000384:	48001400 	.word	0x48001400
 8000388:	20000000 	.word	0x20000000
 800038c:	20000008 	.word	0x20000008
 8000390:	20000010 	.word	0x20000010

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b094      	sub	sp, #80	; 0x50
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0318 	add.w	r3, r7, #24
 800039e:	2238      	movs	r2, #56	; 0x38
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f009 fada 	bl	800995c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003b6:	2000      	movs	r0, #0
 80003b8:	f002 fe1c 	bl	8002ff4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80003bc:	2322      	movs	r3, #34	; 0x22
 80003be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	2340      	movs	r3, #64	; 0x40
 80003c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003ca:	2301      	movs	r3, #1
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ce:	2302      	movs	r3, #2
 80003d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d2:	2302      	movs	r3, #2
 80003d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80003da:	2314      	movs	r3, #20
 80003dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003de:	2302      	movs	r3, #2
 80003e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80003e2:	2304      	movs	r3, #4
 80003e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 feb4 	bl	800315c <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003fa:	f000 fb2d 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	2303      	movs	r3, #3
 8000404:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2104      	movs	r1, #4
 8000416:	4618      	mov	r0, r3
 8000418:	f003 f9b8 	bl	800378c <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000422:	f000 fb19 	bl	8000a58 <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3750      	adds	r7, #80	; 0x50
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08c      	sub	sp, #48	; 0x30
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	2224      	movs	r2, #36	; 0x24
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f009 fa8c 	bl	800995c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000444:	463b      	mov	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <MX_TIM1_Init+0xac>)
 8000450:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <MX_TIM1_Init+0xb0>)
 8000452:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <MX_TIM1_Init+0xac>)
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b20      	ldr	r3, [pc, #128]	; (80004dc <MX_TIM1_Init+0xac>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <MX_TIM1_Init+0xac>)
 8000462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000466:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <MX_TIM1_Init+0xac>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800046e:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <MX_TIM1_Init+0xac>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <MX_TIM1_Init+0xac>)
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800047a:	2303      	movs	r3, #3
 800047c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000492:	2301      	movs	r3, #1
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4619      	mov	r1, r3
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <MX_TIM1_Init+0xac>)
 80004a6:	f003 ff5f 	bl	8004368 <HAL_TIM_Encoder_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80004b0:	f000 fad2 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c0:	463b      	mov	r3, r7
 80004c2:	4619      	mov	r1, r3
 80004c4:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_TIM1_Init+0xac>)
 80004c6:	f004 feeb 	bl	80052a0 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80004d0:	f000 fac2 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	3730      	adds	r7, #48	; 0x30
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000514 	.word	0x20000514
 80004e0:	40012c00 	.word	0x40012c00

080004e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ea:	f107 031c 	add.w	r3, r7, #28
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
 8000504:	615a      	str	r2, [r3, #20]
 8000506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000508:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <MX_TIM2_Init+0xdc>)
 800050a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000510:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <MX_TIM2_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000516:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <MX_TIM2_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <MX_TIM2_Init+0xdc>)
 800051e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000524:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <MX_TIM2_Init+0xdc>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <MX_TIM2_Init+0xdc>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000530:	4823      	ldr	r0, [pc, #140]	; (80005c0 <MX_TIM2_Init+0xdc>)
 8000532:	f003 fdc1 	bl	80040b8 <HAL_TIM_PWM_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800053c:	f000 fa8c 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000548:	f107 031c 	add.w	r3, r7, #28
 800054c:	4619      	mov	r1, r3
 800054e:	481c      	ldr	r0, [pc, #112]	; (80005c0 <MX_TIM2_Init+0xdc>)
 8000550:	f004 fea6 	bl	80052a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800055a:	f000 fa7d 	bl	8000a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800055e:	2360      	movs	r3, #96	; 0x60
 8000560:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	4812      	ldr	r0, [pc, #72]	; (80005c0 <MX_TIM2_Init+0xdc>)
 8000576:	f004 f9ab 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000580:	f000 fa6a 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	2204      	movs	r2, #4
 8000588:	4619      	mov	r1, r3
 800058a:	480d      	ldr	r0, [pc, #52]	; (80005c0 <MX_TIM2_Init+0xdc>)
 800058c:	f004 f9a0 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000596:	f000 fa5f 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	220c      	movs	r2, #12
 800059e:	4619      	mov	r1, r3
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <MX_TIM2_Init+0xdc>)
 80005a2:	f004 f995 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80005ac:	f000 fa54 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <MX_TIM2_Init+0xdc>)
 80005b2:	f000 fb93 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	; 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000560 	.word	0x20000560

080005c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2224      	movs	r2, #36	; 0x24
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f009 f9c2 	bl	800995c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <MX_TIM3_Init+0xa8>)
 80005e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_TIM3_Init+0xa4>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000608:	2303      	movs	r3, #3
 800060a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000620:	2301      	movs	r3, #1
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <MX_TIM3_Init+0xa4>)
 8000634:	f003 fe98 	bl	8004368 <HAL_TIM_Encoder_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800063e:	f000 fa0b 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <MX_TIM3_Init+0xa4>)
 8000650:	f004 fe26 	bl	80052a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800065a:	f000 f9fd 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3730      	adds	r7, #48	; 0x30
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000047c 	.word	0x2000047c
 800066c:	40000400 	.word	0x40000400

08000670 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2224      	movs	r2, #36	; 0x24
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f009 f96c 	bl	800995c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_TIM4_Init+0xa4>)
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <MX_TIM4_Init+0xa8>)
 8000692:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_TIM4_Init+0xa4>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_TIM4_Init+0xa4>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006b4:	2303      	movs	r3, #3
 80006b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006bc:	2301      	movs	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006cc:	2301      	movs	r3, #1
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006e0:	f003 fe42 	bl	8004368 <HAL_TIM_Encoder_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80006ea:	f000 f9b5 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006fc:	f004 fdd0 	bl	80052a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000706:	f000 f9a7 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	; 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200003e4 	.word	0x200003e4
 8000718:	40000800 	.word	0x40000800

0800071c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_TIM6_Init+0x64>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_TIM6_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_TIM6_Init+0x64>)
 8000734:	2218      	movs	r2, #24
 8000736:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_TIM6_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_TIM6_Init+0x64>)
 8000740:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000744:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_TIM6_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_TIM6_Init+0x64>)
 800074e:	f003 fbf1 	bl	8003f34 <HAL_TIM_Base_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000758:	f000 f97e 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_TIM6_Init+0x64>)
 800076a:	f004 fd99 	bl	80052a0 <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 f970 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200004c8 	.word	0x200004c8
 8000784:	40001000 	.word	0x40001000

08000788 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	; 0x50
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800078e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2234      	movs	r2, #52	; 0x34
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f009 f8d7 	bl	800995c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_TIM16_Init+0xec>)
 80007b0:	4a31      	ldr	r2, [pc, #196]	; (8000878 <MX_TIM16_Init+0xf0>)
 80007b2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <MX_TIM16_Init+0xec>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <MX_TIM16_Init+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <MX_TIM16_Init+0xec>)
 80007c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_TIM16_Init+0xec>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_TIM16_Init+0xec>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_TIM16_Init+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007da:	4826      	ldr	r0, [pc, #152]	; (8000874 <MX_TIM16_Init+0xec>)
 80007dc:	f003 fbaa 	bl	8003f34 <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80007e6:	f000 f937 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80007ea:	4822      	ldr	r0, [pc, #136]	; (8000874 <MX_TIM16_Init+0xec>)
 80007ec:	f003 fc64 	bl	80040b8 <HAL_TIM_PWM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80007f6:	f000 f92f 	bl	8000a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fa:	2360      	movs	r3, #96	; 0x60
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000802:	2300      	movs	r3, #0
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000806:	2300      	movs	r3, #0
 8000808:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800081a:	2200      	movs	r2, #0
 800081c:	4619      	mov	r1, r3
 800081e:	4815      	ldr	r0, [pc, #84]	; (8000874 <MX_TIM16_Init+0xec>)
 8000820:	f004 f856 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800082a:	f000 f915 	bl	8000a58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000846:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <MX_TIM16_Init+0xec>)
 8000856:	f004 fda5 	bl	80053a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000860:	f000 f8fa 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <MX_TIM16_Init+0xec>)
 8000866:	f000 fa39 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	; 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200005ac 	.word	0x200005ac
 8000878:	40014400 	.word	0x40014400

0800087c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	; 0x50
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000882:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2234      	movs	r2, #52	; 0x34
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f009 f85d 	bl	800995c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_TIM17_Init+0xec>)
 80008a4:	4a31      	ldr	r2, [pc, #196]	; (800096c <MX_TIM17_Init+0xf0>)
 80008a6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80008a8:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <MX_TIM17_Init+0xec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <MX_TIM17_Init+0xec>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <MX_TIM17_Init+0xec>)
 80008b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_TIM17_Init+0xec>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_TIM17_Init+0xec>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_TIM17_Init+0xec>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80008ce:	4826      	ldr	r0, [pc, #152]	; (8000968 <MX_TIM17_Init+0xec>)
 80008d0:	f003 fb30 	bl	8003f34 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80008da:	f000 f8bd 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80008de:	4822      	ldr	r0, [pc, #136]	; (8000968 <MX_TIM17_Init+0xec>)
 80008e0:	f003 fbea 	bl	80040b8 <HAL_TIM_PWM_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80008ea:	f000 f8b5 	bl	8000a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	; 0x60
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4815      	ldr	r0, [pc, #84]	; (8000968 <MX_TIM17_Init+0xec>)
 8000914:	f003 ffdc 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800091e:	f000 f89b 	bl	8000a58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM17_Init+0xec>)
 800094a:	f004 fd2b 	bl	80053a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000954:	f000 f880 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM17_Init+0xec>)
 800095a:	f000 f9bf 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 800095e:	bf00      	nop
 8000960:	3750      	adds	r7, #80	; 0x50
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000430 	.word	0x20000430
 800096c:	40014800 	.word	0x40014800

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_GPIO_Init+0xb8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a27      	ldr	r2, [pc, #156]	; (8000a28 <MX_GPIO_Init+0xb8>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_GPIO_Init+0xb8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_GPIO_Init+0xb8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <MX_GPIO_Init+0xb8>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_GPIO_Init+0xb8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_GPIO_Init+0xb8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_GPIO_Init+0xb8>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_GPIO_Init+0xb8>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <MX_GPIO_Init+0xbc>)
 80009d4:	f000 fda8 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_Direction_Pin|M1_Direction_Pin|M3_Direction_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2115      	movs	r1, #21
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 fda2 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80009e4:	2301      	movs	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_GPIO_Init+0xbc>)
 80009fc:	f000 fc12 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_Direction_Pin M1_Direction_Pin M3_Direction_Pin */
  GPIO_InitStruct.Pin = M2_Direction_Pin|M1_Direction_Pin|M3_Direction_Pin;
 8000a00:	2315      	movs	r3, #21
 8000a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f000 fc03 	bl	8001224 <HAL_GPIO_Init>

}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48001400 	.word	0x48001400

08000a30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  // Motor control calculations can be called from here
	controlMotor(&motor1Control, (int16_t)TIM1->CNT);
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a42:	f7ff fc09 	bl	8000258 <controlMotor>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40012c00 	.word	0x40012c00
 8000a54:	20000000 	.word	0x20000000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6613      	str	r3, [r2, #96]	; 0x60
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a9a:	f002 fb4f 	bl	800313c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a46      	ldr	r2, [pc, #280]	; (8000be4 <HAL_TIM_Encoder_MspInit+0x138>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12a      	bne.n	8000b24 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ace:	4b46      	ldr	r3, [pc, #280]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a45      	ldr	r2, [pc, #276]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ae2:	623b      	str	r3, [r7, #32]
 8000ae4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a3f      	ldr	r2, [pc, #252]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b10:	2306      	movs	r3, #6
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 fb81 	bl	8001224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b22:	e05a      	b.n	8000bda <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a30      	ldr	r2, [pc, #192]	; (8000bec <HAL_TIM_Encoder_MspInit+0x140>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d128      	bne.n	8000b80 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b5e:	2330      	movs	r3, #48	; 0x30
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	481d      	ldr	r0, [pc, #116]	; (8000bf0 <HAL_TIM_Encoder_MspInit+0x144>)
 8000b7a:	f000 fb53 	bl	8001224 <HAL_GPIO_Init>
}
 8000b7e:	e02c      	b.n	8000bda <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <HAL_TIM_Encoder_MspInit+0x148>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d127      	bne.n	8000bda <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bba:	23c0      	movs	r3, #192	; 0xc0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <HAL_TIM_Encoder_MspInit+0x144>)
 8000bd6:	f000 fb25 	bl	8001224 <HAL_GPIO_Init>
}
 8000bda:	bf00      	nop
 8000bdc:	3738      	adds	r7, #56	; 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40012c00 	.word	0x40012c00
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40000400 	.word	0x40000400
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	40000800 	.word	0x40000800

08000bf8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c08:	d113      	bne.n	8000c32 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_TIM_PWM_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <HAL_TIM_PWM_MspInit+0x44>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6593      	str	r3, [r2, #88]	; 0x58
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_TIM_PWM_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	201c      	movs	r0, #28
 8000c28:	f000 fac7 	bl	80011ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c2c:	201c      	movs	r0, #28
 8000c2e:	f000 fade 	bl	80011ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <HAL_TIM_Base_MspInit+0x8c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d114      	bne.n	8000c7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <HAL_TIM_Base_MspInit+0x90>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <HAL_TIM_Base_MspInit+0x90>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <HAL_TIM_Base_MspInit+0x90>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2036      	movs	r0, #54	; 0x36
 8000c70:	f000 faa3 	bl	80011ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c74:	2036      	movs	r0, #54	; 0x36
 8000c76:	f000 faba 	bl	80011ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c7a:	e022      	b.n	8000cc2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_TIM_Base_MspInit+0x94>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10c      	bne.n	8000ca0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_TIM_Base_MspInit+0x90>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <HAL_TIM_Base_MspInit+0x90>)
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	6613      	str	r3, [r2, #96]	; 0x60
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_TIM_Base_MspInit+0x90>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
}
 8000c9e:	e010      	b.n	8000cc2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	; (8000cd8 <HAL_TIM_Base_MspInit+0x98>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_TIM_Base_MspInit+0x90>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_TIM_Base_MspInit+0x90>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_TIM_Base_MspInit+0x90>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40001000 	.word	0x40001000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40014400 	.word	0x40014400
 8000cd8:	40014800 	.word	0x40014800

08000cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	d11d      	bne.n	8000d3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4a32      	ldr	r2, [pc, #200]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin|M1_PWM_Pin|M3_PWM_Pin;
 8000d16:	232a      	movs	r3, #42	; 0x2a
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d26:	2301      	movs	r3, #1
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f000 fa76 	bl	8001224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000d38:	e044      	b.n	8000dc4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM16)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <HAL_TIM_MspPostInit+0xf4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d11d      	bne.n	8000d80 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = n_Sleep_Pin;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(n_Sleep_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f000 fa53 	bl	8001224 <HAL_GPIO_Init>
}
 8000d7e:	e021      	b.n	8000dc4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM17)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_TIM_MspPostInit+0xf8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d11c      	bne.n	8000dc4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Thrower_PWM_Pin;
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000db2:	2301      	movs	r3, #1
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Thrower_PWM_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f000 fa30 	bl	8001224 <HAL_GPIO_Init>
}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40014400 	.word	0x40014400
 8000dd4:	40014800 	.word	0x40014800

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f8ae 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <USB_LP_IRQHandler+0x10>)
 8000e32:	f000 fcb2 	bl	800179a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000129c 	.word	0x2000129c

08000e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM2_IRQHandler+0x10>)
 8000e46:	f003 fbc3 	bl	80045d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000560 	.word	0x20000560

08000e54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM6_DAC_IRQHandler+0x10>)
 8000e5a:	f003 fbb9 	bl	80045d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200004c8 	.word	0x200004c8

08000e68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eb6:	f7ff ffd7 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f008 fd1d 	bl	80098f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ebe:	f7ff f9e5 	bl	800028c <main>

08000ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   r0, =_estack
 8000ec4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8000ed0:	080099e4 	.word	0x080099e4
  ldr r2, =_sbss
 8000ed4:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8000ed8:	20001590 	.word	0x20001590

08000edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>

08000ede <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f95b 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f80e 	bl	8000f10 <HAL_InitTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	e001      	b.n	8000f04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f00:	f7ff fdb0 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f04:	79fb      	ldrb	r3, [r7, #7]

}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_InitTick+0x68>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d022      	beq.n	8000f6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_InitTick+0x6c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_InitTick+0x68>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f966 	bl	800120a <HAL_SYSTICK_Config>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10f      	bne.n	8000f64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d809      	bhi.n	8000f5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f52:	f000 f932 	bl	80011ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_InitTick+0x70>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e007      	b.n	8000f6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e004      	b.n	8000f6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000020 	.word	0x20000020
 8000f7c:	20000018 	.word	0x20000018
 8000f80:	2000001c 	.word	0x2000001c

08000f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x1c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <HAL_IncTick+0x1c>)
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	200005f8 	.word	0x200005f8
 8000fa4:	20000020 	.word	0x20000020

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200005f8 	.word	0x200005f8

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fd8:	d004      	beq.n	8000fe4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_Delay+0x40>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe4:	bf00      	nop
 8000fe6:	f7ff ffdf 	bl	8000fa8 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d8f7      	bhi.n	8000fe6 <HAL_Delay+0x26>
  {
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000020 	.word	0x20000020

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0b      	blt.n	8001092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <__NVIC_EnableIRQ+0x38>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e100 	.word	0xe000e100

080010a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db0a      	blt.n	80010ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	490c      	ldr	r1, [pc, #48]	; (80010f0 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010cc:	e00a      	b.n	80010e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	0112      	lsls	r2, r2, #4
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	761a      	strb	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf28      	it	cs
 8001116:	2304      	movcs	r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3304      	adds	r3, #4
 800111e:	2b06      	cmp	r3, #6
 8001120:	d902      	bls.n	8001128 <NVIC_EncodePriority+0x30>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b03      	subs	r3, #3
 8001126:	e000      	b.n	800112a <NVIC_EncodePriority+0x32>
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43d9      	mvns	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001170:	d301      	bcc.n	8001176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2301      	movs	r3, #1
 8001174:	e00f      	b.n	8001196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SysTick_Config+0x40>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117e:	210f      	movs	r1, #15
 8001180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001184:	f7ff ff8e 	bl	80010a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x40>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff29 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff40 	bl	800104c <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff90 	bl	80010f8 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5f 	bl	80010a4 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff33 	bl	8001068 <__NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffa4 	bl	8001160 <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001224:	b480      	push	{r7}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001232:	e15a      	b.n	80014ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2101      	movs	r1, #1
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 814c 	beq.w	80014e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d005      	beq.n	8001264 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001260:	2b02      	cmp	r3, #2
 8001262:	d130      	bne.n	80012c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800129a:	2201      	movs	r2, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	f003 0201 	and.w	r2, r3, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d017      	beq.n	8001302 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d123      	bne.n	8001356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	691a      	ldr	r2, [r3, #16]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	6939      	ldr	r1, [r7, #16]
 8001352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0203 	and.w	r2, r3, #3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80a6 	beq.w	80014e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001398:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_GPIO_Init+0x2e4>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139c:	4a5a      	ldr	r2, [pc, #360]	; (8001508 <HAL_GPIO_Init+0x2e4>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6613      	str	r3, [r2, #96]	; 0x60
 80013a4:	4b58      	ldr	r3, [pc, #352]	; (8001508 <HAL_GPIO_Init+0x2e4>)
 80013a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b0:	4a56      	ldr	r2, [pc, #344]	; (800150c <HAL_GPIO_Init+0x2e8>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013da:	d01f      	beq.n	800141c <HAL_GPIO_Init+0x1f8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <HAL_GPIO_Init+0x2ec>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d019      	beq.n	8001418 <HAL_GPIO_Init+0x1f4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_GPIO_Init+0x2f0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d013      	beq.n	8001414 <HAL_GPIO_Init+0x1f0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a4a      	ldr	r2, [pc, #296]	; (8001518 <HAL_GPIO_Init+0x2f4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00d      	beq.n	8001410 <HAL_GPIO_Init+0x1ec>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a49      	ldr	r2, [pc, #292]	; (800151c <HAL_GPIO_Init+0x2f8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d007      	beq.n	800140c <HAL_GPIO_Init+0x1e8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a48      	ldr	r2, [pc, #288]	; (8001520 <HAL_GPIO_Init+0x2fc>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_GPIO_Init+0x1e4>
 8001404:	2305      	movs	r3, #5
 8001406:	e00a      	b.n	800141e <HAL_GPIO_Init+0x1fa>
 8001408:	2306      	movs	r3, #6
 800140a:	e008      	b.n	800141e <HAL_GPIO_Init+0x1fa>
 800140c:	2304      	movs	r3, #4
 800140e:	e006      	b.n	800141e <HAL_GPIO_Init+0x1fa>
 8001410:	2303      	movs	r3, #3
 8001412:	e004      	b.n	800141e <HAL_GPIO_Init+0x1fa>
 8001414:	2302      	movs	r3, #2
 8001416:	e002      	b.n	800141e <HAL_GPIO_Init+0x1fa>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_GPIO_Init+0x1fa>
 800141c:	2300      	movs	r3, #0
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	f002 0203 	and.w	r2, r2, #3
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4093      	lsls	r3, r2
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142e:	4937      	ldr	r1, [pc, #220]	; (800150c <HAL_GPIO_Init+0x2e8>)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800143c:	4b39      	ldr	r3, [pc, #228]	; (8001524 <HAL_GPIO_Init+0x300>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001460:	4a30      	ldr	r2, [pc, #192]	; (8001524 <HAL_GPIO_Init+0x300>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_GPIO_Init+0x300>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800148a:	4a26      	ldr	r2, [pc, #152]	; (8001524 <HAL_GPIO_Init+0x300>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_GPIO_Init+0x300>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_GPIO_Init+0x300>)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_GPIO_Init+0x300>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014de:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_GPIO_Init+0x300>)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f47f ae9d 	bne.w	8001234 <HAL_GPIO_Init+0x10>
  }
}
 80014fa:	bf00      	nop
 80014fc:	bf00      	nop
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000
 8001510:	48000400 	.word	0x48000400
 8001514:	48000800 	.word	0x48000800
 8001518:	48000c00 	.word	0x48000c00
 800151c:	48001000 	.word	0x48001000
 8001520:	48001400 	.word	0x48001400
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001544:	e002      	b.n	800154c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43d9      	mvns	r1, r3
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	400b      	ands	r3, r1
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b08b      	sub	sp, #44	; 0x2c
 8001590:	af06      	add	r7, sp, #24
 8001592:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0d7      	b.n	800174e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d106      	bne.n	80015b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f007 fe9a 	bl	80092ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2203      	movs	r2, #3
 80015bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 ffea 	bl	800559e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	e04c      	b.n	800166a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	3301      	adds	r3, #1
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	b298      	uxth	r0, r3
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	3336      	adds	r3, #54	; 0x36
 800160e:	4602      	mov	r2, r0
 8001610:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3303      	adds	r3, #3
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3338      	adds	r3, #56	; 0x38
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	333c      	adds	r3, #60	; 0x3c
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3340      	adds	r3, #64	; 0x40
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	3301      	adds	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3ad      	bcc.n	80015d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e044      	b.n	8001704 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	f203 1369 	addw	r3, r3, #361	; 0x169
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	3301      	adds	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d3b5      	bcc.n	800167a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	687e      	ldr	r6, [r7, #4]
 8001716:	466d      	mov	r5, sp
 8001718:	f106 0410 	add.w	r4, r6, #16
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	1d33      	adds	r3, r6, #4
 8001726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001728:	6838      	ldr	r0, [r7, #0]
 800172a:	f003 ff53 	bl	80055d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d102      	bne.n	800174c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 fc29 	bl	8002f9e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001756 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_PCD_Start+0x16>
 8001768:	2302      	movs	r3, #2
 800176a:	e012      	b.n	8001792 <HAL_PCD_Start+0x3c>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fef9 	bl	8005570 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f005 feae 	bl	80074e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 feb3 	bl	8007512 <USB_ReadInterrupts>
 80017ac:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fb26 	bl	8001e0a <PCD_EP_ISR_Handler>

    return;
 80017be:	e110      	b.n	80019e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d013      	beq.n	80017f2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017dc:	b292      	uxth	r2, r2
 80017de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f007 fe13 	bl	800940e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017e8:	2100      	movs	r1, #0
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8fc 	bl	80019e8 <HAL_PCD_SetAddress>

    return;
 80017f0:	e0f7      	b.n	80019e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00c      	beq.n	8001816 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001804:	b29a      	uxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800180e:	b292      	uxth	r2, r2
 8001810:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001814:	e0e5      	b.n	80019e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00c      	beq.n	800183a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001828:	b29a      	uxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001832:	b292      	uxth	r2, r2
 8001834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001838:	e0d3      	b.n	80019e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d034      	beq.n	80018ae <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0204 	bic.w	r2, r2, #4
 8001856:	b292      	uxth	r2, r2
 8001858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0208 	bic.w	r2, r2, #8
 800186e:	b292      	uxth	r2, r2
 8001870:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800187a:	2b01      	cmp	r3, #1
 800187c:	d107      	bne.n	800188e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f007 ffb5 	bl	80097f8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f007 fdf6 	bl	8009480 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018a6:	b292      	uxth	r2, r2
 80018a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018ac:	e099      	b.n	80019e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d027      	beq.n	8001908 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0208 	orr.w	r2, r2, #8
 80018ca:	b292      	uxth	r2, r2
 80018cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018e2:	b292      	uxth	r2, r2
 80018e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0204 	orr.w	r2, r2, #4
 80018fa:	b292      	uxth	r2, r2
 80018fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f007 fda3 	bl	800944c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001906:	e06c      	b.n	80019e2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	2b00      	cmp	r3, #0
 8001910:	d040      	beq.n	8001994 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001924:	b292      	uxth	r2, r2
 8001926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d12b      	bne.n	800198c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800193c:	b29a      	uxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0204 	orr.w	r2, r2, #4
 8001946:	b292      	uxth	r2, r2
 8001948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0208 	orr.w	r2, r2, #8
 800195e:	b292      	uxth	r2, r2
 8001960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001974:	b29b      	uxth	r3, r3
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001982:	2101      	movs	r1, #1
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f007 ff37 	bl	80097f8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800198a:	e02a      	b.n	80019e2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f007 fd5d 	bl	800944c <HAL_PCD_SuspendCallback>
    return;
 8001992:	e026      	b.n	80019e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00f      	beq.n	80019be <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b0:	b292      	uxth	r2, r2
 80019b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f007 fd1b 	bl	80093f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019bc:	e011      	b.n	80019e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00c      	beq.n	80019e2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019da:	b292      	uxth	r2, r2
 80019dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019e0:	bf00      	nop
  }
}
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_PCD_SetAddress+0x1a>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e013      	b.n	8001a2a <HAL_PCD_SetAddress+0x42>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fd4e 	bl	80074bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4603      	mov	r3, r0
 8001a42:	70fb      	strb	r3, [r7, #3]
 8001a44:	460b      	mov	r3, r1
 8001a46:	803b      	strh	r3, [r7, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	da0e      	bge.n	8001a76 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2201      	movs	r2, #1
 8001a72:	705a      	strb	r2, [r3, #1]
 8001a74:	e00e      	b.n	8001a94 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	f003 0207 	and.w	r2, r3, #7
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001aa0:	883a      	ldrh	r2, [r7, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	78ba      	ldrb	r2, [r7, #2]
 8001aaa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	785b      	ldrb	r3, [r3, #1]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001abe:	78bb      	ldrb	r3, [r7, #2]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d102      	bne.n	8001aca <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_PCD_EP_Open+0xa6>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e00e      	b.n	8001af6 <HAL_PCD_EP_Open+0xc4>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fd96 	bl	8005618 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001af4:	7afb      	ldrb	r3, [r7, #11]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da0e      	bge.n	8001b30 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	705a      	strb	r2, [r3, #1]
 8001b2e:	e00e      	b.n	8001b4e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 0207 	and.w	r2, r3, #7
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_PCD_EP_Close+0x6a>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e00e      	b.n	8001b86 <HAL_PCD_EP_Close+0x88>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 f8e2 	bl	8005d40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
 8001ba0:	f003 0207 	and.w	r2, r3, #7
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d106      	bne.n	8001bf2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6979      	ldr	r1, [r7, #20]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 fa95 	bl	800611a <USB_EPStartXfer>
 8001bf0:	e005      	b.n	8001bfe <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6979      	ldr	r1, [r7, #20]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 fa8e 	bl	800611a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 0207 	and.w	r2, r3, #7
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	460b      	mov	r3, r1
 8001c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2201      	movs	r2, #1
 8001c82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c84:	7afb      	ldrb	r3, [r7, #11]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6979      	ldr	r1, [r7, #20]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 fa3a 	bl	800611a <USB_EPStartXfer>
 8001ca6:	e005      	b.n	8001cb4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6979      	ldr	r1, [r7, #20]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fa33 	bl	800611a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	f003 0207 	and.w	r2, r3, #7
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d901      	bls.n	8001cdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e03e      	b.n	8001d5a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da0e      	bge.n	8001d02 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	705a      	strb	r2, [r3, #1]
 8001d00:	e00c      	b.n	8001d1c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_PCD_EP_SetStall+0x7e>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e00e      	b.n	8001d5a <HAL_PCD_EP_SetStall+0x9c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68f9      	ldr	r1, [r7, #12]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 fab7 	bl	80072be <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d901      	bls.n	8001d80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e040      	b.n	8001e02 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da0e      	bge.n	8001da6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	705a      	strb	r2, [r3, #1]
 8001da4:	e00e      	b.n	8001dc4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 0207 	and.w	r2, r3, #7
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_PCD_EP_ClrStall+0x82>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e00e      	b.n	8001e02 <HAL_PCD_EP_ClrStall+0xa0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f005 fab4 	bl	8007360 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b096      	sub	sp, #88	; 0x58
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e12:	e39c      	b.n	800254e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001e2e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 815e 	bne.w	80020f4 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d150      	bne.n	8001ee6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e54:	81fb      	strh	r3, [r7, #14]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3328      	adds	r3, #40	; 0x28
 8001e6c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e94:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	441a      	add	r2, r3
 8001ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f007 fa89 	bl	80093be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 834a 	beq.w	800254e <PCD_EP_ISR_Handler+0x744>
 8001eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 8345 	bne.w	800254e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ee4:	e333      	b.n	800254e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ef8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d032      	beq.n	8001f6a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f38:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	f005 fb39 	bl	80075b6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f50:	4013      	ands	r3, r2
 8001f52:	823b      	strh	r3, [r7, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	8a3a      	ldrh	r2, [r7, #16]
 8001f5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f007 f9fe 	bl	8009364 <HAL_PCD_SetupStageCallback>
 8001f68:	e2f1      	b.n	800254e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f6a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f280 82ed 	bge.w	800254e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f80:	4013      	ands	r3, r2
 8001f82:	83fb      	strh	r3, [r7, #30]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	8bfa      	ldrh	r2, [r7, #30]
 8001f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <PCD_EP_ISR_Handler+0x1ec>
 8001fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d015      	beq.n	8001ff6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd0:	6959      	ldr	r1, [r3, #20]
 8001fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f005 faeb 	bl	80075b6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	441a      	add	r2, r3
 8001fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fee:	2100      	movs	r1, #0
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f007 f9c9 	bl	8009388 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 82a3 	bne.w	800254e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4413      	add	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b3e      	cmp	r3, #62	; 0x3e
 800202e:	d918      	bls.n	8002062 <PCD_EP_ISR_Handler+0x258>
 8002030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	647b      	str	r3, [r7, #68]	; 0x44
 8002038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <PCD_EP_ISR_Handler+0x240>
 8002044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002046:	3b01      	subs	r3, #1
 8002048:	647b      	str	r3, [r7, #68]	; 0x44
 800204a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204c:	b29b      	uxth	r3, r3
 800204e:	029b      	lsls	r3, r3, #10
 8002050:	b29b      	uxth	r3, r3
 8002052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800205a:	b29a      	uxth	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	801a      	strh	r2, [r3, #0]
 8002060:	e029      	b.n	80020b6 <PCD_EP_ISR_Handler+0x2ac>
 8002062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d112      	bne.n	8002090 <PCD_EP_ISR_Handler+0x286>
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002074:	b29a      	uxth	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	801a      	strh	r2, [r3, #0]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002088:	b29a      	uxth	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	e012      	b.n	80020b6 <PCD_EP_ISR_Handler+0x2ac>
 8002090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
 8002098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <PCD_EP_ISR_Handler+0x2a0>
 80020a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a6:	3301      	adds	r3, #1
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
 80020aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	029b      	lsls	r3, r3, #10
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c6:	827b      	strh	r3, [r7, #18]
 80020c8:	8a7b      	ldrh	r3, [r7, #18]
 80020ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020ce:	827b      	strh	r3, [r7, #18]
 80020d0:	8a7b      	ldrh	r3, [r7, #18]
 80020d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020d6:	827b      	strh	r3, [r7, #18]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	8a7b      	ldrh	r3, [r7, #18]
 80020de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	8013      	strh	r3, [r2, #0]
 80020f2:	e22c      	b.n	800254e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002108:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800210c:	2b00      	cmp	r3, #0
 800210e:	f280 80f6 	bge.w	80022fe <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29a      	uxth	r2, r3
 8002124:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002128:	4013      	ands	r3, r2
 800212a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002140:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002144:	b292      	uxth	r2, r2
 8002146:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002148:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800215e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002160:	7b1b      	ldrb	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d123      	bne.n	80021ae <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4413      	add	r3, r2
 8002180:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800218e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 808e 	beq.w	80022b4 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219e:	6959      	ldr	r1, [r3, #20]
 80021a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a2:	88da      	ldrh	r2, [r3, #6]
 80021a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021a8:	f005 fa05 	bl	80075b6 <USB_ReadPMA>
 80021ac:	e082      	b.n	80022b4 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b0:	78db      	ldrb	r3, [r3, #3]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d10a      	bne.n	80021cc <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021ba:	461a      	mov	r2, r3
 80021bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f9d3 	bl	800256a <HAL_PCD_EP_DB_Receive>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80021ca:	e073      	b.n	80022b4 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	441a      	add	r2, r3
 80021f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800220c:	b29b      	uxth	r3, r3
 800220e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d022      	beq.n	8002270 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	4413      	add	r3, r2
 8002244:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002252:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002256:	2b00      	cmp	r3, #0
 8002258:	d02c      	beq.n	80022b4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002260:	6959      	ldr	r1, [r3, #20]
 8002262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002264:	891a      	ldrh	r2, [r3, #8]
 8002266:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800226a:	f005 f9a4 	bl	80075b6 <USB_ReadPMA>
 800226e:	e021      	b.n	80022b4 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002278:	b29b      	uxth	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	4413      	add	r3, r2
 800228a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002294:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002298:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a6:	6959      	ldr	r1, [r3, #20]
 80022a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022aa:	895a      	ldrh	r2, [r3, #10]
 80022ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022b0:	f005 f981 	bl	80075b6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022bc:	441a      	add	r2, r3
 80022be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022ca:	441a      	add	r2, r3
 80022cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <PCD_EP_ISR_Handler+0x4da>
 80022d8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80022dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d206      	bcs.n	80022f2 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f007 f84c 	bl	8009388 <HAL_PCD_DataOutStageCallback>
 80022f0:	e005      	b.n	80022fe <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 ff0e 	bl	800611a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022fe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8121 	beq.w	800254e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800230c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	441a      	add	r2, r3
 800234c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002358:	b29b      	uxth	r3, r3
 800235a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235e:	78db      	ldrb	r3, [r3, #3]
 8002360:	2b02      	cmp	r3, #2
 8002362:	f000 80a2 	beq.w	80024aa <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800236c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236e:	7b1b      	ldrb	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8093 	beq.w	800249c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002376:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d046      	beq.n	8002410 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d126      	bne.n	80023d8 <PCD_EP_ISR_Handler+0x5ce>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	4413      	add	r3, r2
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	00da      	lsls	r2, r3, #3
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	4413      	add	r3, r2
 80023ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023b0:	623b      	str	r3, [r7, #32]
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023bc:	b29a      	uxth	r2, r3
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	801a      	strh	r2, [r3, #0]
 80023d6:	e061      	b.n	800249c <PCD_EP_ISR_Handler+0x692>
 80023d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d15d      	bne.n	800249c <PCD_EP_ISR_Handler+0x692>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	4413      	add	r3, r2
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	00da      	lsls	r2, r3, #3
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	4413      	add	r3, r2
 8002402:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]
 800240e:	e045      	b.n	800249c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d126      	bne.n	800246c <PCD_EP_ISR_Handler+0x662>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002432:	4413      	add	r3, r2
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
 8002436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	00da      	lsls	r2, r3, #3
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	4413      	add	r3, r2
 8002440:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002450:	b29a      	uxth	r2, r3
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002464:	b29a      	uxth	r2, r3
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	801a      	strh	r2, [r3, #0]
 800246a:	e017      	b.n	800249c <PCD_EP_ISR_Handler+0x692>
 800246c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d113      	bne.n	800249c <PCD_EP_ISR_Handler+0x692>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247c:	b29b      	uxth	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002482:	4413      	add	r3, r2
 8002484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	00da      	lsls	r2, r3, #3
 800248c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248e:	4413      	add	r3, r2
 8002490:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002494:	63bb      	str	r3, [r7, #56]	; 0x38
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	2200      	movs	r2, #0
 800249a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f006 ff8b 	bl	80093be <HAL_PCD_DataInStageCallback>
 80024a8:	e051      	b.n	800254e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80024aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d144      	bne.n	8002540 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80024de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d907      	bls.n	80024fa <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80024ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	e002      	b.n	8002500 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f006 ff55 	bl	80093be <HAL_PCD_DataInStageCallback>
 8002514:	e01b      	b.n	800254e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800251e:	441a      	add	r2, r3
 8002520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002522:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800252c:	441a      	add	r2, r3
 800252e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002530:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002538:	4618      	mov	r0, r3
 800253a:	f003 fdee 	bl	800611a <USB_EPStartXfer>
 800253e:	e006      	b.n	800254e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002540:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002544:	461a      	mov	r2, r3
 8002546:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f917 	bl	800277c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002556:	b29b      	uxth	r3, r3
 8002558:	b21b      	sxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	f6ff ac5a 	blt.w	8001e14 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3758      	adds	r7, #88	; 0x58
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b088      	sub	sp, #32
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	4613      	mov	r3, r2
 8002576:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d07c      	beq.n	800267c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	4413      	add	r3, r2
 800259c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	8b7b      	ldrh	r3, [r7, #26]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d306      	bcc.n	80025c0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	8b7b      	ldrh	r3, [r7, #26]
 80025b8:	1ad2      	subs	r2, r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	619a      	str	r2, [r3, #24]
 80025be:	e002      	b.n	80025c6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d123      	bne.n	8002616 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e8:	833b      	strh	r3, [r7, #24]
 80025ea:	8b3b      	ldrh	r3, [r7, #24]
 80025ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025f0:	833b      	strh	r3, [r7, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	441a      	add	r2, r3
 8002600:	8b3b      	ldrh	r3, [r7, #24]
 8002602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800260a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002612:	b29b      	uxth	r3, r3
 8002614:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01f      	beq.n	8002660 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	82fb      	strh	r3, [r7, #22]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	8afb      	ldrh	r3, [r7, #22]
 800264c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002658:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800265c:	b29b      	uxth	r3, r3
 800265e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002660:	8b7b      	ldrh	r3, [r7, #26]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8085 	beq.w	8002772 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6959      	ldr	r1, [r3, #20]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	891a      	ldrh	r2, [r3, #8]
 8002674:	8b7b      	ldrh	r3, [r7, #26]
 8002676:	f004 ff9e 	bl	80075b6 <USB_ReadPMA>
 800267a:	e07a      	b.n	8002772 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	4413      	add	r3, r2
 8002696:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	8b7b      	ldrh	r3, [r7, #26]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d306      	bcc.n	80026ba <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	699a      	ldr	r2, [r3, #24]
 80026b0:	8b7b      	ldrh	r3, [r7, #26]
 80026b2:	1ad2      	subs	r2, r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	619a      	str	r2, [r3, #24]
 80026b8:	e002      	b.n	80026c0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d123      	bne.n	8002710 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	83fb      	strh	r3, [r7, #30]
 80026e4:	8bfb      	ldrh	r3, [r7, #30]
 80026e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026ea:	83fb      	strh	r3, [r7, #30]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	441a      	add	r2, r3
 80026fa:	8bfb      	ldrh	r3, [r7, #30]
 80026fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270c:	b29b      	uxth	r3, r3
 800270e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d11f      	bne.n	800275a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002734:	83bb      	strh	r3, [r7, #28]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	441a      	add	r2, r3
 8002744:	8bbb      	ldrh	r3, [r7, #28]
 8002746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800274a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800274e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002752:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002756:	b29b      	uxth	r3, r3
 8002758:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800275a:	8b7b      	ldrh	r3, [r7, #26]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6959      	ldr	r1, [r3, #20]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	895a      	ldrh	r2, [r3, #10]
 800276c:	8b7b      	ldrh	r3, [r7, #26]
 800276e:	f004 ff22 	bl	80075b6 <USB_ReadPMA>
    }
  }

  return count;
 8002772:	8b7b      	ldrh	r3, [r7, #26]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b0a2      	sub	sp, #136	; 0x88
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 81c5 	beq.w	8002b20 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d907      	bls.n	80027da <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d2:	1ad2      	subs	r2, r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	619a      	str	r2, [r3, #24]
 80027d8:	e002      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 80b9 	bne.w	800295c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d126      	bne.n	8002840 <HAL_PCD_EP_DB_Transmit+0xc4>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002800:	b29b      	uxth	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	4413      	add	r3, r2
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	00da      	lsls	r2, r3, #3
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	4413      	add	r3, r2
 8002814:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002824:	b29a      	uxth	r2, r3
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002838:	b29a      	uxth	r2, r3
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	e01a      	b.n	8002876 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d116      	bne.n	8002876 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	4413      	add	r3, r2
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	00da      	lsls	r2, r3, #3
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	4413      	add	r3, r2
 800286a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	2200      	movs	r2, #0
 8002874:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d126      	bne.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x156>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4413      	add	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	00da      	lsls	r2, r3, #3
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4413      	add	r3, r2
 80028a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	801a      	strh	r2, [r3, #0]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	801a      	strh	r2, [r3, #0]
 80028d0:	e017      	b.n	8002902 <HAL_PCD_EP_DB_Transmit+0x186>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	785b      	ldrb	r3, [r3, #1]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d113      	bne.n	8002902 <HAL_PCD_EP_DB_Transmit+0x186>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	4413      	add	r3, r2
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	00da      	lsls	r2, r3, #3
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	4413      	add	r3, r2
 80028f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2200      	movs	r2, #0
 8002900:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4619      	mov	r1, r3
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f006 fd58 	bl	80093be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 82d2 	beq.w	8002ebe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002934:	827b      	strh	r3, [r7, #18]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	441a      	add	r2, r3
 8002944:	8a7b      	ldrh	r3, [r7, #18]
 8002946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800294a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800294e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002956:	b29b      	uxth	r3, r3
 8002958:	8013      	strh	r3, [r2, #0]
 800295a:	e2b0      	b.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d021      	beq.n	80029aa <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800297c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002980:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	441a      	add	r2, r3
 8002992:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800299a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800299e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	f040 8284 	bne.w	8002ebe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029be:	441a      	add	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029cc:	441a      	add	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	6a1a      	ldr	r2, [r3, #32]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d309      	bcc.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	1ad2      	subs	r2, r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	621a      	str	r2, [r3, #32]
 80029f0:	e015      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d107      	bne.n	8002a0a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a08:	e009      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d155      	bne.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x356>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	4413      	add	r3, r2
 8002a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	00da      	lsls	r2, r3, #3
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	4413      	add	r3, r2
 8002a48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a50:	2b3e      	cmp	r3, #62	; 0x3e
 8002a52:	d916      	bls.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x306>
 8002a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a66:	3b01      	subs	r3, #1
 8002a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	029b      	lsls	r3, r3, #10
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	801a      	strh	r2, [r3, #0]
 8002a80:	e043      	b.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d112      	bne.n	8002aae <HAL_PCD_EP_DB_Transmit+0x332>
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	801a      	strh	r2, [r3, #0]
 8002aac:	e02d      	b.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x348>
 8002abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	029b      	lsls	r3, r3, #10
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ace:	801a      	strh	r2, [r3, #0]
 8002ad0:	e01b      	b.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	785b      	ldrb	r3, [r3, #1]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d117      	bne.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aee:	4413      	add	r3, r2
 8002af0:	643b      	str	r3, [r7, #64]	; 0x40
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	00da      	lsls	r2, r3, #3
 8002af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afa:	4413      	add	r3, r2
 8002afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b08:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	6959      	ldr	r1, [r3, #20]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	891a      	ldrh	r2, [r3, #8]
 8002b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f004 fd0a 	bl	8007532 <USB_WritePMA>
 8002b1e:	e1ce      	b.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	699a      	ldr	r2, [r3, #24]
 8002b4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d307      	bcc.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b5c:	1ad2      	subs	r2, r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	619a      	str	r2, [r3, #24]
 8002b62:	e002      	b.n	8002b6a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80c4 	bne.w	8002cfc <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d126      	bne.n	8002bca <HAL_PCD_EP_DB_Transmit+0x44e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b90:	4413      	add	r3, r2
 8002b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	00da      	lsls	r2, r3, #3
 8002b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bc6:	801a      	strh	r2, [r3, #0]
 8002bc8:	e01a      	b.n	8002c00 <HAL_PCD_EP_DB_Transmit+0x484>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d116      	bne.n	8002c00 <HAL_PCD_EP_DB_Transmit+0x484>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be6:	4413      	add	r3, r2
 8002be8:	673b      	str	r3, [r7, #112]	; 0x70
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	00da      	lsls	r2, r3, #3
 8002bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d12f      	bne.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c26:	4413      	add	r3, r2
 8002c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	00da      	lsls	r2, r3, #3
 8002c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c36:	4413      	add	r3, r2
 8002c38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c6a:	801a      	strh	r2, [r3, #0]
 8002c6c:	e017      	b.n	8002c9e <HAL_PCD_EP_DB_Transmit+0x522>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d113      	bne.n	8002c9e <HAL_PCD_EP_DB_Transmit+0x522>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c84:	4413      	add	r3, r2
 8002c86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	00da      	lsls	r2, r3, #3
 8002c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c90:	4413      	add	r3, r2
 8002c92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c96:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f006 fb8a 	bl	80093be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 8104 	bne.w	8002ebe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	441a      	add	r2, r3
 8002ce2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	8013      	strh	r3, [r2, #0]
 8002cfa:	e0e0      	b.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d121      	bne.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d20:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	441a      	add	r2, r3
 8002d32:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f040 80b4 	bne.w	8002ebe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d5e:	441a      	add	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d6c:	441a      	add	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d309      	bcc.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	621a      	str	r2, [r3, #32]
 8002d90:	e015      	b.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002d9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002da8:	e009      	b.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	785b      	ldrb	r3, [r3, #1]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d155      	bne.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de0:	4413      	add	r3, r2
 8002de2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	00da      	lsls	r2, r3, #3
 8002dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dec:	4413      	add	r3, r2
 8002dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002df2:	657b      	str	r3, [r7, #84]	; 0x54
 8002df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df6:	2b3e      	cmp	r3, #62	; 0x3e
 8002df8:	d916      	bls.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	677b      	str	r3, [r7, #116]	; 0x74
 8002e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x694>
 8002e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	677b      	str	r3, [r7, #116]	; 0x74
 8002e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	e040      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d112      	bne.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e50:	801a      	strh	r2, [r3, #0]
 8002e52:	e02a      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	677b      	str	r3, [r7, #116]	; 0x74
 8002e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	3301      	adds	r3, #1
 8002e68:	677b      	str	r3, [r7, #116]	; 0x74
 8002e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	029b      	lsls	r3, r3, #10
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	e018      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d114      	bne.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e8e:	4413      	add	r3, r2
 8002e90:	663b      	str	r3, [r7, #96]	; 0x60
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	00da      	lsls	r2, r3, #3
 8002e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	6959      	ldr	r1, [r3, #20]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	895a      	ldrh	r2, [r3, #10]
 8002eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f004 fb3a 	bl	8007532 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed8:	823b      	strh	r3, [r7, #16]
 8002eda:	8a3b      	ldrh	r3, [r7, #16]
 8002edc:	f083 0310 	eor.w	r3, r3, #16
 8002ee0:	823b      	strh	r3, [r7, #16]
 8002ee2:	8a3b      	ldrh	r3, [r7, #16]
 8002ee4:	f083 0320 	eor.w	r3, r3, #32
 8002ee8:	823b      	strh	r3, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	441a      	add	r2, r3
 8002ef8:	8a3b      	ldrh	r3, [r7, #16]
 8002efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3788      	adds	r7, #136	; 0x88
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	817b      	strh	r3, [r7, #10]
 8002f26:	4613      	mov	r3, r2
 8002f28:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f36:	897b      	ldrh	r3, [r7, #10]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4413      	add	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	e009      	b.n	8002f62 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f4e:	897a      	ldrh	r2, [r7, #10]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f62:	893b      	ldrh	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	80da      	strh	r2, [r3, #6]
 8002f76:	e00b      	b.n	8002f90 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d141      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d131      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003010:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003016:	4a46      	ldr	r2, [pc, #280]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003028:	4a41      	ldr	r2, [pc, #260]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800302e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003030:	4b40      	ldr	r3, [pc, #256]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2232      	movs	r2, #50	; 0x32
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	4a3f      	ldr	r2, [pc, #252]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	0c9b      	lsrs	r3, r3, #18
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003046:	e002      	b.n	800304e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3b01      	subs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305a:	d102      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f2      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d158      	bne.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e057      	b.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003074:	4b2e      	ldr	r3, [pc, #184]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307a:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003084:	e04d      	b.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308c:	d141      	bne.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309a:	d131      	bne.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800309c:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a2:	4a23      	ldr	r2, [pc, #140]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030b4:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2232      	movs	r2, #50	; 0x32
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	0c9b      	lsrs	r3, r3, #18
 80030ce:	3301      	adds	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d2:	e002      	b.n	80030da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e6:	d102      	bne.n	80030ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f2      	bne.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fa:	d112      	bne.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e011      	b.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003110:	e007      	b.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800311a:	4a05      	ldr	r2, [pc, #20]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003120:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40007000 	.word	0x40007000
 8003134:	20000018 	.word	0x20000018
 8003138:	431bde83 	.word	0x431bde83

0800313c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314a:	6093      	str	r3, [r2, #8]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40007000 	.word	0x40007000

0800315c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e308      	b.n	8003780 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d075      	beq.n	8003266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317a:	4ba3      	ldr	r3, [pc, #652]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003184:	4ba0      	ldr	r3, [pc, #640]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	d102      	bne.n	800319a <HAL_RCC_OscConfig+0x3e>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_OscConfig+0x44>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d10b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	4b99      	ldr	r3, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05b      	beq.n	8003264 <HAL_RCC_OscConfig+0x108>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d157      	bne.n	8003264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e2e3      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x74>
 80031c2:	4b91      	ldr	r3, [pc, #580]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a90      	ldr	r2, [pc, #576]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e01d      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x98>
 80031da:	4b8b      	ldr	r3, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a8a      	ldr	r2, [pc, #552]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b88      	ldr	r3, [pc, #544]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a87      	ldr	r2, [pc, #540]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031f4:	4b84      	ldr	r3, [pc, #528]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a83      	ldr	r2, [pc, #524]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b81      	ldr	r3, [pc, #516]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a80      	ldr	r2, [pc, #512]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fd fec8 	bl	8000fa8 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fd fec4 	bl	8000fa8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e2a8      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0xc0>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fd feb4 	bl	8000fa8 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fd feb0 	bl	8000fa8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e294      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003256:	4b6c      	ldr	r3, [pc, #432]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0xe8>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d075      	beq.n	800335e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003272:	4b65      	ldr	r3, [pc, #404]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800327c:	4b62      	ldr	r3, [pc, #392]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d102      	bne.n	8003292 <HAL_RCC_OscConfig+0x136>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d002      	beq.n	8003298 <HAL_RCC_OscConfig+0x13c>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d11f      	bne.n	80032d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003298:	4b5b      	ldr	r3, [pc, #364]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_OscConfig+0x154>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e267      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b55      	ldr	r3, [pc, #340]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	4952      	ldr	r1, [pc, #328]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032c4:	4b51      	ldr	r3, [pc, #324]	; (800340c <HAL_RCC_OscConfig+0x2b0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fe21 	bl	8000f10 <HAL_InitTick>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d043      	beq.n	800335c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e253      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d023      	beq.n	8003328 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e0:	4b49      	ldr	r3, [pc, #292]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a48      	ldr	r2, [pc, #288]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80032e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd fe5c 	bl	8000fa8 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fd fe58 	bl	8000fa8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e23c      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003306:	4b40      	ldr	r3, [pc, #256]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	061b      	lsls	r3, r3, #24
 8003320:	4939      	ldr	r1, [pc, #228]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
 8003326:	e01a      	b.n	800335e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003328:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a36      	ldr	r2, [pc, #216]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd fe38 	bl	8000fa8 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333c:	f7fd fe34 	bl	8000fa8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e218      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x1e0>
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800335c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d03c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01c      	beq.n	80033ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003372:	4b25      	ldr	r3, [pc, #148]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003378:	4a23      	ldr	r2, [pc, #140]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fd fe11 	bl	8000fa8 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338a:	f7fd fe0d 	bl	8000fa8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1f1      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0ef      	beq.n	800338a <HAL_RCC_OscConfig+0x22e>
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fd fdf4 	bl	8000fa8 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fd fdf0 	bl	8000fa8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e1d4      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ef      	bne.n	80033c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80ab 	beq.w	8003548 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_RCC_OscConfig+0x2b4>
 8003402:	2301      	movs	r3, #1
 8003404:	e005      	b.n	8003412 <HAL_RCC_OscConfig+0x2b6>
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	2000001c 	.word	0x2000001c
 8003410:	2300      	movs	r3, #0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4baf      	ldr	r3, [pc, #700]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	4aae      	ldr	r2, [pc, #696]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6593      	str	r3, [r2, #88]	; 0x58
 8003422:	4bac      	ldr	r3, [pc, #688]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003432:	4ba9      	ldr	r3, [pc, #676]	; (80036d8 <HAL_RCC_OscConfig+0x57c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d118      	bne.n	8003470 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800343e:	4ba6      	ldr	r3, [pc, #664]	; (80036d8 <HAL_RCC_OscConfig+0x57c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4aa5      	ldr	r2, [pc, #660]	; (80036d8 <HAL_RCC_OscConfig+0x57c>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344a:	f7fd fdad 	bl	8000fa8 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003452:	f7fd fda9 	bl	8000fa8 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e18d      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003464:	4b9c      	ldr	r3, [pc, #624]	; (80036d8 <HAL_RCC_OscConfig+0x57c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d108      	bne.n	800348a <HAL_RCC_OscConfig+0x32e>
 8003478:	4b96      	ldr	r3, [pc, #600]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	4a95      	ldr	r2, [pc, #596]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003488:	e024      	b.n	80034d4 <HAL_RCC_OscConfig+0x378>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b05      	cmp	r3, #5
 8003490:	d110      	bne.n	80034b4 <HAL_RCC_OscConfig+0x358>
 8003492:	4b90      	ldr	r3, [pc, #576]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	4a8e      	ldr	r2, [pc, #568]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034a2:	4b8c      	ldr	r3, [pc, #560]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	4a8a      	ldr	r2, [pc, #552]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x378>
 80034b4:	4b87      	ldr	r3, [pc, #540]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	4a86      	ldr	r2, [pc, #536]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c4:	4b83      	ldr	r3, [pc, #524]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	4a82      	ldr	r2, [pc, #520]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d016      	beq.n	800350a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fd fd64 	bl	8000fa8 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fd fd60 	bl	8000fa8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e142      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ed      	beq.n	80034e4 <HAL_RCC_OscConfig+0x388>
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fd fd4d 	bl	8000fa8 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fd fd49 	bl	8000fa8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e12b      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003528:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ed      	bne.n	8003512 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	4a64      	ldr	r2, [pc, #400]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003546:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d03c      	beq.n	80035ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01c      	beq.n	8003596 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800355c:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 800355e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003562:	4a5c      	ldr	r2, [pc, #368]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fd fd1c 	bl	8000fa8 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003574:	f7fd fd18 	bl	8000fa8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0fc      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003586:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ef      	beq.n	8003574 <HAL_RCC_OscConfig+0x418>
 8003594:	e01b      	b.n	80035ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003596:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359c:	4a4d      	ldr	r2, [pc, #308]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fd fcff 	bl	8000fa8 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ae:	f7fd fcfb 	bl	8000fa8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e0df      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035c0:	4b44      	ldr	r3, [pc, #272]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80035c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ef      	bne.n	80035ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80d3 	beq.w	800377e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035d8:	4b3e      	ldr	r3, [pc, #248]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b0c      	cmp	r3, #12
 80035e2:	f000 808d 	beq.w	8003700 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d15a      	bne.n	80036a4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a38      	ldr	r2, [pc, #224]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80035f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fd fcd5 	bl	8000fa8 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fd fcd1 	bl	8000fa8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0b5      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003614:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f0      	bne.n	8003602 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003620:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_RCC_OscConfig+0x580>)
 8003626:	4013      	ands	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6a11      	ldr	r1, [r2, #32]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003630:	3a01      	subs	r2, #1
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800363a:	0212      	lsls	r2, r2, #8
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003642:	0852      	lsrs	r2, r2, #1
 8003644:	3a01      	subs	r2, #1
 8003646:	0552      	lsls	r2, r2, #21
 8003648:	4311      	orrs	r1, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800364e:	0852      	lsrs	r2, r2, #1
 8003650:	3a01      	subs	r2, #1
 8003652:	0652      	lsls	r2, r2, #25
 8003654:	4311      	orrs	r1, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800365a:	06d2      	lsls	r2, r2, #27
 800365c:	430a      	orrs	r2, r1
 800365e:	491d      	ldr	r1, [pc, #116]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003660:	4313      	orrs	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 800366a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003670:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd fc94 	bl	8000fa8 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd fc90 	bl	8000fa8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e074      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x528>
 80036a2:	e06c      	b.n	800377e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80036aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <HAL_RCC_OscConfig+0x578>)
 80036c2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fd fc6c 	bl	8000fa8 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d2:	e00e      	b.n	80036f2 <HAL_RCC_OscConfig+0x596>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fd fc62 	bl	8000fa8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e046      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f2:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_RCC_OscConfig+0x62c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x584>
 80036fe:	e03e      	b.n	800377e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e039      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <HAL_RCC_OscConfig+0x62c>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 0203 	and.w	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	429a      	cmp	r2, r3
 800371e:	d12c      	bne.n	800377a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	3b01      	subs	r3, #1
 800372c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d123      	bne.n	800377a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11b      	bne.n	800377a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d113      	bne.n	800377a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	3b01      	subs	r3, #1
 8003760:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d109      	bne.n	800377a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	3b01      	subs	r3, #1
 8003774:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d001      	beq.n	800377e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000

0800378c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e11e      	b.n	80039e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a4:	4b91      	ldr	r3, [pc, #580]	; (80039ec <HAL_RCC_ClockConfig+0x260>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d910      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b8e      	ldr	r3, [pc, #568]	; (80039ec <HAL_RCC_ClockConfig+0x260>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 020f 	bic.w	r2, r3, #15
 80037ba:	498c      	ldr	r1, [pc, #560]	; (80039ec <HAL_RCC_ClockConfig+0x260>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b8a      	ldr	r3, [pc, #552]	; (80039ec <HAL_RCC_ClockConfig+0x260>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e106      	b.n	80039e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d073      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d129      	bne.n	800383c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e8:	4b81      	ldr	r3, [pc, #516]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0f4      	b.n	80039e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037f8:	f000 f966 	bl	8003ac8 <RCC_GetSysClockFreqFromPLLSource>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4a7c      	ldr	r2, [pc, #496]	; (80039f4 <HAL_RCC_ClockConfig+0x268>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d93f      	bls.n	8003886 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003806:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800381a:	2b00      	cmp	r3, #0
 800381c:	d033      	beq.n	8003886 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003822:	2b00      	cmp	r3, #0
 8003824:	d12f      	bne.n	8003886 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003826:	4b72      	ldr	r3, [pc, #456]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800382e:	4a70      	ldr	r2, [pc, #448]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003834:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	e024      	b.n	8003886 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d107      	bne.n	8003854 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003844:	4b6a      	ldr	r3, [pc, #424]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0c6      	b.n	80039e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003854:	4b66      	ldr	r3, [pc, #408]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0be      	b.n	80039e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003864:	f000 f8ce 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 8003868:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4a61      	ldr	r2, [pc, #388]	; (80039f4 <HAL_RCC_ClockConfig+0x268>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d909      	bls.n	8003886 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003872:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800387a:	4a5d      	ldr	r2, [pc, #372]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 800387c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003880:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003886:	4b5a      	ldr	r3, [pc, #360]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4957      	ldr	r1, [pc, #348]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fd fb86 	bl	8000fa8 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fd fb82 	bl	8000fa8 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e095      	b.n	80039e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	4b4e      	ldr	r3, [pc, #312]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1eb      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d023      	beq.n	800391c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a42      	ldr	r2, [pc, #264]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 80038e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038f8:	4b3d      	ldr	r3, [pc, #244]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003900:	4a3b      	ldr	r2, [pc, #236]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003906:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003908:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4936      	ldr	r1, [pc, #216]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
 800391a:	e008      	b.n	800392e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b80      	cmp	r3, #128	; 0x80
 8003920:	d105      	bne.n	800392e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003922:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800392c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800392e:	4b2f      	ldr	r3, [pc, #188]	; (80039ec <HAL_RCC_ClockConfig+0x260>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d21d      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393c:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_RCC_ClockConfig+0x260>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 020f 	bic.w	r2, r3, #15
 8003944:	4929      	ldr	r1, [pc, #164]	; (80039ec <HAL_RCC_ClockConfig+0x260>)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800394c:	f7fd fb2c 	bl	8000fa8 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	e00a      	b.n	800396a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003954:	f7fd fb28 	bl	8000fa8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e03b      	b.n	80039e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_ClockConfig+0x260>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d1ed      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003984:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4917      	ldr	r1, [pc, #92]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a2:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	490f      	ldr	r1, [pc, #60]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039b6:	f000 f825 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80039ba:	4602      	mov	r2, r0
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_RCC_ClockConfig+0x264>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	490c      	ldr	r1, [pc, #48]	; (80039f8 <HAL_RCC_ClockConfig+0x26c>)
 80039c8:	5ccb      	ldrb	r3, [r1, r3]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x270>)
 80039d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x274>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd fa98 	bl	8000f10 <HAL_InitTick>
 80039e0:	4603      	mov	r3, r0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40022000 	.word	0x40022000
 80039f0:	40021000 	.word	0x40021000
 80039f4:	04c4b400 	.word	0x04c4b400
 80039f8:	080099cc 	.word	0x080099cc
 80039fc:	20000018 	.word	0x20000018
 8003a00:	2000001c 	.word	0x2000001c

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a0a:	4b2c      	ldr	r3, [pc, #176]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d102      	bne.n	8003a1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a16:	4b2a      	ldr	r3, [pc, #168]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	e047      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a1c:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d102      	bne.n	8003a2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a28:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e03e      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a2e:	4b23      	ldr	r3, [pc, #140]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d136      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3301      	adds	r3, #1
 8003a50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a58:	4a1a      	ldr	r2, [pc, #104]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	4a16      	ldr	r2, [pc, #88]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a62:	68d2      	ldr	r2, [r2, #12]
 8003a64:	0a12      	lsrs	r2, r2, #8
 8003a66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	617b      	str	r3, [r7, #20]
      break;
 8003a70:	e00c      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a72:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	4a10      	ldr	r2, [pc, #64]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a7c:	68d2      	ldr	r2, [r2, #12]
 8003a7e:	0a12      	lsrs	r2, r2, #8
 8003a80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a84:	fb02 f303 	mul.w	r3, r2, r3
 8003a88:	617b      	str	r3, [r7, #20]
      break;
 8003a8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0e5b      	lsrs	r3, r3, #25
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e001      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003aac:	693b      	ldr	r3, [r7, #16]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	007a1200 	.word	0x007a1200

08003ac8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d10c      	bne.n	8003b06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aec:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003af6:	68d2      	ldr	r2, [r2, #12]
 8003af8:	0a12      	lsrs	r2, r2, #8
 8003afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	617b      	str	r3, [r7, #20]
    break;
 8003b04:	e00c      	b.n	8003b20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	; (8003b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	0a12      	lsrs	r2, r2, #8
 8003b14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
    break;
 8003b1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0e5b      	lsrs	r3, r3, #25
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b3a:	687b      	ldr	r3, [r7, #4]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	007a1200 	.word	0x007a1200
 8003b50:	00f42400 	.word	0x00f42400

08003b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b60:	2300      	movs	r3, #0
 8003b62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8098 	beq.w	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b76:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10d      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	4a3f      	ldr	r2, [pc, #252]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9e:	4b3a      	ldr	r3, [pc, #232]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a39      	ldr	r2, [pc, #228]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003baa:	f7fd f9fd 	bl	8000fa8 <HAL_GetTick>
 8003bae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb0:	e009      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb2:	f7fd f9f9 	bl	8000fa8 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d902      	bls.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc4:	e005      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bc6:	4b30      	ldr	r3, [pc, #192]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ef      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d159      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d019      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c10:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c20:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd f9b9 	bl	8000fa8 <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c38:	e00b      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd f9b5 	bl	8000fa8 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d902      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c50:	e006      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ec      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10b      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	4903      	ldr	r1, [pc, #12]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c7c:	e008      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c7e:	7cfb      	ldrb	r3, [r7, #19]
 8003c80:	74bb      	strb	r3, [r7, #18]
 8003c82:	e005      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c90:	7c7b      	ldrb	r3, [r7, #17]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d105      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c96:	4ba6      	ldr	r3, [pc, #664]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	4aa5      	ldr	r2, [pc, #660]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cae:	4ba0      	ldr	r3, [pc, #640]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	f023 0203 	bic.w	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	499c      	ldr	r1, [pc, #624]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd0:	4b97      	ldr	r3, [pc, #604]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f023 020c 	bic.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	4994      	ldr	r1, [pc, #592]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf2:	4b8f      	ldr	r3, [pc, #572]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	498b      	ldr	r1, [pc, #556]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d14:	4b86      	ldr	r3, [pc, #536]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	4983      	ldr	r1, [pc, #524]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d36:	4b7e      	ldr	r3, [pc, #504]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	497a      	ldr	r1, [pc, #488]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d58:	4b75      	ldr	r3, [pc, #468]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	4972      	ldr	r1, [pc, #456]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d7a:	4b6d      	ldr	r3, [pc, #436]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	4969      	ldr	r1, [pc, #420]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d9c:	4b64      	ldr	r3, [pc, #400]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4961      	ldr	r1, [pc, #388]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dbe:	4b5c      	ldr	r3, [pc, #368]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	4958      	ldr	r1, [pc, #352]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de0:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	4950      	ldr	r1, [pc, #320]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e00:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e18:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	4942      	ldr	r1, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e36:	d105      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e38:	4b3d      	ldr	r3, [pc, #244]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a3c      	ldr	r2, [pc, #240]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e42:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e50:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4934      	ldr	r1, [pc, #208]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e70:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a2e      	ldr	r2, [pc, #184]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e88:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	4926      	ldr	r1, [pc, #152]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea8:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a20      	ldr	r2, [pc, #128]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	4918      	ldr	r1, [pc, #96]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ede:	d105      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d015      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	490a      	ldr	r1, [pc, #40]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f16:	d105      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f24:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000

08003f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e049      	b.n	8003fda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc fe70 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f000 fde8 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d001      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e04a      	b.n	8004092 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d018      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004026:	d013      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00e      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d009      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1a      	ldr	r2, [pc, #104]	; (80040ac <HAL_TIM_Base_Start_IT+0xc8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d004      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d115      	bne.n	800407c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b06      	cmp	r3, #6
 8004060:	d015      	beq.n	800408e <HAL_TIM_Base_Start_IT+0xaa>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004068:	d011      	beq.n	800408e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407a:	e008      	b.n	800408e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e000      	b.n	8004090 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40013400 	.word	0x40013400
 80040b0:	40014000 	.word	0x40014000
 80040b4:	00010007 	.word	0x00010007

080040b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e049      	b.n	800415e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fc fd8a 	bl	8000bf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f000 fd26 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_TIM_PWM_Start+0x24>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e03c      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b04      	cmp	r3, #4
 8004190:	d109      	bne.n	80041a6 <HAL_TIM_PWM_Start+0x3e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	e02f      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d109      	bne.n	80041c0 <HAL_TIM_PWM_Start+0x58>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e022      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b0c      	cmp	r3, #12
 80041c4:	d109      	bne.n	80041da <HAL_TIM_PWM_Start+0x72>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e015      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d109      	bne.n	80041f4 <HAL_TIM_PWM_Start+0x8c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e008      	b.n	8004206 <HAL_TIM_PWM_Start+0x9e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e097      	b.n	800433e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start+0xb6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800421c:	e023      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Start+0xc6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422c:	e01b      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Start+0xd6>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800423c:	e013      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Start+0xe6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800424c:	e00b      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b10      	cmp	r3, #16
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Start+0xf6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800425c:	e003      	b.n	8004266 <HAL_TIM_PWM_Start+0xfe>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2201      	movs	r2, #1
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fff0 	bl	8005254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a33      	ldr	r2, [pc, #204]	; (8004348 <HAL_TIM_PWM_Start+0x1e0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x13e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a32      	ldr	r2, [pc, #200]	; (800434c <HAL_TIM_PWM_Start+0x1e4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x13e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a30      	ldr	r2, [pc, #192]	; (8004350 <HAL_TIM_PWM_Start+0x1e8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x13e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2f      	ldr	r2, [pc, #188]	; (8004354 <HAL_TIM_PWM_Start+0x1ec>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x13e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2d      	ldr	r2, [pc, #180]	; (8004358 <HAL_TIM_PWM_Start+0x1f0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_PWM_Start+0x142>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_TIM_PWM_Start+0x144>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a20      	ldr	r2, [pc, #128]	; (8004348 <HAL_TIM_PWM_Start+0x1e0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d018      	beq.n	80042fc <HAL_TIM_PWM_Start+0x194>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d2:	d013      	beq.n	80042fc <HAL_TIM_PWM_Start+0x194>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <HAL_TIM_PWM_Start+0x1f4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00e      	beq.n	80042fc <HAL_TIM_PWM_Start+0x194>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <HAL_TIM_PWM_Start+0x1f8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_TIM_PWM_Start+0x194>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a17      	ldr	r2, [pc, #92]	; (800434c <HAL_TIM_PWM_Start+0x1e4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_TIM_PWM_Start+0x194>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a16      	ldr	r2, [pc, #88]	; (8004350 <HAL_TIM_PWM_Start+0x1e8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d115      	bne.n	8004328 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <HAL_TIM_PWM_Start+0x1fc>)
 8004304:	4013      	ands	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d015      	beq.n	800433a <HAL_TIM_PWM_Start+0x1d2>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004314:	d011      	beq.n	800433a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	e008      	b.n	800433a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e000      	b.n	800433c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40013400 	.word	0x40013400
 8004350:	40014000 	.word	0x40014000
 8004354:	40014400 	.word	0x40014400
 8004358:	40014800 	.word	0x40014800
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	00010007 	.word	0x00010007

08004368 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e097      	b.n	80044ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7fc fb8b 	bl	8000aac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80043ac:	f023 0307 	bic.w	r3, r3, #7
 80043b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f000 fbc3 	bl	8004b48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	4313      	orrs	r3, r2
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004408:	f023 030c 	bic.w	r3, r3, #12
 800440c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	4313      	orrs	r3, r2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	011a      	lsls	r2, r3, #4
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	031b      	lsls	r3, r3, #12
 8004438:	4313      	orrs	r3, r2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800444e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	4313      	orrs	r3, r2
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d110      	bne.n	8004506 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d102      	bne.n	80044f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80044ea:	7b7b      	ldrb	r3, [r7, #13]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d001      	beq.n	80044f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e069      	b.n	80045c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004504:	e031      	b.n	800456a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d110      	bne.n	800452e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800450c:	7bbb      	ldrb	r3, [r7, #14]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d102      	bne.n	8004518 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004512:	7b3b      	ldrb	r3, [r7, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e055      	b.n	80045c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800452c:	e01d      	b.n	800456a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d108      	bne.n	8004546 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004534:	7bbb      	ldrb	r3, [r7, #14]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800453a:	7b7b      	ldrb	r3, [r7, #13]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d102      	bne.n	8004546 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004540:	7b3b      	ldrb	r3, [r7, #12]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d001      	beq.n	800454a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e03e      	b.n	80045c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_TIM_Encoder_Start+0xc4>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b04      	cmp	r3, #4
 8004574:	d008      	beq.n	8004588 <HAL_TIM_Encoder_Start+0xd4>
 8004576:	e00f      	b.n	8004598 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fe67 	bl	8005254 <TIM_CCxChannelCmd>
      break;
 8004586:	e016      	b.n	80045b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2201      	movs	r2, #1
 800458e:	2104      	movs	r1, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fe5f 	bl	8005254 <TIM_CCxChannelCmd>
      break;
 8004596:	e00e      	b.n	80045b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2201      	movs	r2, #1
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fe57 	bl	8005254 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2201      	movs	r2, #1
 80045ac:	2104      	movs	r1, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fe50 	bl	8005254 <TIM_CCxChannelCmd>
      break;
 80045b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d122      	bne.n	800462c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d11b      	bne.n	800462c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0202 	mvn.w	r2, #2
 80045fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fa7a 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa6c 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fa7d 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b04      	cmp	r3, #4
 8004638:	d122      	bne.n	8004680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b04      	cmp	r3, #4
 8004646:	d11b      	bne.n	8004680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0204 	mvn.w	r2, #4
 8004650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fa50 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fa42 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fa53 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b08      	cmp	r3, #8
 800468c:	d122      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b08      	cmp	r3, #8
 800469a:	d11b      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0208 	mvn.w	r2, #8
 80046a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2204      	movs	r2, #4
 80046aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa26 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 80046c0:	e005      	b.n	80046ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa18 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fa29 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b10      	cmp	r3, #16
 80046e0:	d122      	bne.n	8004728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d11b      	bne.n	8004728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0210 	mvn.w	r2, #16
 80046f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2208      	movs	r2, #8
 80046fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f9fc 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 8004714:	e005      	b.n	8004722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f9ee 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f9ff 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10e      	bne.n	8004754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b01      	cmp	r3, #1
 8004742:	d107      	bne.n	8004754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0201 	mvn.w	r2, #1
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc f96e 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b80      	cmp	r3, #128	; 0x80
 8004760:	d10e      	bne.n	8004780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b80      	cmp	r3, #128	; 0x80
 800476e:	d107      	bne.n	8004780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 febc 	bl	80054f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478e:	d10e      	bne.n	80047ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479a:	2b80      	cmp	r3, #128	; 0x80
 800479c:	d107      	bne.n	80047ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 feaf 	bl	800550c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d10e      	bne.n	80047da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d107      	bne.n	80047da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f9ad 	bl	8004b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d10e      	bne.n	8004806 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d107      	bne.n	8004806 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f06f 0220 	mvn.w	r2, #32
 80047fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fe6f 	bl	80054e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004814:	d10f      	bne.n	8004836 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004824:	d107      	bne.n	8004836 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800482e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fe75 	bl	8005520 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004844:	d10f      	bne.n	8004866 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004854:	d107      	bne.n	8004866 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fe67 	bl	8005534 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004874:	d10f      	bne.n	8004896 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004884:	d107      	bne.n	8004896 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800488e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fe59 	bl	8005548 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048a4:	d10f      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048b4:	d107      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80048be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fe4b 	bl	800555c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0ff      	b.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b14      	cmp	r3, #20
 80048fa:	f200 80f0 	bhi.w	8004ade <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004959 	.word	0x08004959
 8004908:	08004adf 	.word	0x08004adf
 800490c:	08004adf 	.word	0x08004adf
 8004910:	08004adf 	.word	0x08004adf
 8004914:	08004999 	.word	0x08004999
 8004918:	08004adf 	.word	0x08004adf
 800491c:	08004adf 	.word	0x08004adf
 8004920:	08004adf 	.word	0x08004adf
 8004924:	080049db 	.word	0x080049db
 8004928:	08004adf 	.word	0x08004adf
 800492c:	08004adf 	.word	0x08004adf
 8004930:	08004adf 	.word	0x08004adf
 8004934:	08004a1b 	.word	0x08004a1b
 8004938:	08004adf 	.word	0x08004adf
 800493c:	08004adf 	.word	0x08004adf
 8004940:	08004adf 	.word	0x08004adf
 8004944:	08004a5d 	.word	0x08004a5d
 8004948:	08004adf 	.word	0x08004adf
 800494c:	08004adf 	.word	0x08004adf
 8004950:	08004adf 	.word	0x08004adf
 8004954:	08004a9d 	.word	0x08004a9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f982 	bl	8004c68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0208 	orr.w	r2, r2, #8
 8004972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0204 	bic.w	r2, r2, #4
 8004982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6999      	ldr	r1, [r3, #24]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	619a      	str	r2, [r3, #24]
      break;
 8004996:	e0a5      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f9f2 	bl	8004d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6999      	ldr	r1, [r3, #24]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	021a      	lsls	r2, r3, #8
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	619a      	str	r2, [r3, #24]
      break;
 80049d8:	e084      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fa5b 	bl	8004e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0208 	orr.w	r2, r2, #8
 80049f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0204 	bic.w	r2, r2, #4
 8004a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69d9      	ldr	r1, [r3, #28]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	61da      	str	r2, [r3, #28]
      break;
 8004a18:	e064      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fac3 	bl	8004fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69d9      	ldr	r1, [r3, #28]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	021a      	lsls	r2, r3, #8
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	61da      	str	r2, [r3, #28]
      break;
 8004a5a:	e043      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fb2c 	bl	80050c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0204 	bic.w	r2, r2, #4
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004a9a:	e023      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fb70 	bl	8005188 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	021a      	lsls	r2, r3, #8
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004adc:	e002      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop

08004af8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a3c      	ldr	r2, [pc, #240]	; (8004c4c <TIM_Base_SetConfig+0x104>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x38>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x38>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a39      	ldr	r2, [pc, #228]	; (8004c50 <TIM_Base_SetConfig+0x108>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x38>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a38      	ldr	r2, [pc, #224]	; (8004c54 <TIM_Base_SetConfig+0x10c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x38>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a37      	ldr	r2, [pc, #220]	; (8004c58 <TIM_Base_SetConfig+0x110>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2d      	ldr	r2, [pc, #180]	; (8004c4c <TIM_Base_SetConfig+0x104>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01b      	beq.n	8004bd2 <TIM_Base_SetConfig+0x8a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d017      	beq.n	8004bd2 <TIM_Base_SetConfig+0x8a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2a      	ldr	r2, [pc, #168]	; (8004c50 <TIM_Base_SetConfig+0x108>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <TIM_Base_SetConfig+0x8a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <TIM_Base_SetConfig+0x10c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00f      	beq.n	8004bd2 <TIM_Base_SetConfig+0x8a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a28      	ldr	r2, [pc, #160]	; (8004c58 <TIM_Base_SetConfig+0x110>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_Base_SetConfig+0x8a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a27      	ldr	r2, [pc, #156]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_Base_SetConfig+0x8a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a26      	ldr	r2, [pc, #152]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_Base_SetConfig+0x8a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a25      	ldr	r2, [pc, #148]	; (8004c64 <TIM_Base_SetConfig+0x11c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d108      	bne.n	8004be4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a10      	ldr	r2, [pc, #64]	; (8004c4c <TIM_Base_SetConfig+0x104>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00f      	beq.n	8004c30 <TIM_Base_SetConfig+0xe8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a11      	ldr	r2, [pc, #68]	; (8004c58 <TIM_Base_SetConfig+0x110>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00b      	beq.n	8004c30 <TIM_Base_SetConfig+0xe8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d007      	beq.n	8004c30 <TIM_Base_SetConfig+0xe8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a0f      	ldr	r2, [pc, #60]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_Base_SetConfig+0xe8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <TIM_Base_SetConfig+0x11c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d103      	bne.n	8004c38 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	615a      	str	r2, [r3, #20]
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40013400 	.word	0x40013400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800

08004c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0303 	bic.w	r3, r3, #3
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 0302 	bic.w	r3, r3, #2
 8004cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a2c      	ldr	r2, [pc, #176]	; (8004d74 <TIM_OC1_SetConfig+0x10c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00f      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x80>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a2b      	ldr	r2, [pc, #172]	; (8004d78 <TIM_OC1_SetConfig+0x110>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00b      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x80>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <TIM_OC1_SetConfig+0x114>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d007      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x80>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a29      	ldr	r2, [pc, #164]	; (8004d80 <TIM_OC1_SetConfig+0x118>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x80>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <TIM_OC1_SetConfig+0x11c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d10c      	bne.n	8004d02 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0308 	bic.w	r3, r3, #8
 8004cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f023 0304 	bic.w	r3, r3, #4
 8004d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <TIM_OC1_SetConfig+0x10c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00f      	beq.n	8004d2a <TIM_OC1_SetConfig+0xc2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a1a      	ldr	r2, [pc, #104]	; (8004d78 <TIM_OC1_SetConfig+0x110>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <TIM_OC1_SetConfig+0xc2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <TIM_OC1_SetConfig+0x114>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <TIM_OC1_SetConfig+0xc2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <TIM_OC1_SetConfig+0x118>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_OC1_SetConfig+0xc2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <TIM_OC1_SetConfig+0x11c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d111      	bne.n	8004d4e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40013400 	.word	0x40013400
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40014400 	.word	0x40014400
 8004d84:	40014800 	.word	0x40014800

08004d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f023 0210 	bic.w	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0320 	bic.w	r3, r3, #32
 8004dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <TIM_OC2_SetConfig+0x100>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_OC2_SetConfig+0x6c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <TIM_OC2_SetConfig+0x104>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d10d      	bne.n	8004e10 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <TIM_OC2_SetConfig+0x100>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00f      	beq.n	8004e38 <TIM_OC2_SetConfig+0xb0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <TIM_OC2_SetConfig+0x104>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_OC2_SetConfig+0xb0>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <TIM_OC2_SetConfig+0x108>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d007      	beq.n	8004e38 <TIM_OC2_SetConfig+0xb0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a1a      	ldr	r2, [pc, #104]	; (8004e94 <TIM_OC2_SetConfig+0x10c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC2_SetConfig+0xb0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <TIM_OC2_SetConfig+0x110>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d113      	bne.n	8004e60 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40013400 	.word	0x40013400
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40014400 	.word	0x40014400
 8004e98:	40014800 	.word	0x40014800

08004e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a27      	ldr	r2, [pc, #156]	; (8004f98 <TIM_OC3_SetConfig+0xfc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC3_SetConfig+0x6a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a26      	ldr	r2, [pc, #152]	; (8004f9c <TIM_OC3_SetConfig+0x100>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10d      	bne.n	8004f22 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <TIM_OC3_SetConfig+0xfc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00f      	beq.n	8004f4a <TIM_OC3_SetConfig+0xae>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1b      	ldr	r2, [pc, #108]	; (8004f9c <TIM_OC3_SetConfig+0x100>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <TIM_OC3_SetConfig+0xae>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1a      	ldr	r2, [pc, #104]	; (8004fa0 <TIM_OC3_SetConfig+0x104>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <TIM_OC3_SetConfig+0xae>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <TIM_OC3_SetConfig+0x108>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_OC3_SetConfig+0xae>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <TIM_OC3_SetConfig+0x10c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d113      	bne.n	8004f72 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40012c00 	.word	0x40012c00
 8004f9c:	40013400 	.word	0x40013400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	031b      	lsls	r3, r3, #12
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a28      	ldr	r2, [pc, #160]	; (80050ac <TIM_OC4_SetConfig+0x100>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_OC4_SetConfig+0x6c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a27      	ldr	r2, [pc, #156]	; (80050b0 <TIM_OC4_SetConfig+0x104>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d10d      	bne.n	8005034 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800501e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	031b      	lsls	r3, r3, #12
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005032:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <TIM_OC4_SetConfig+0x100>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00f      	beq.n	800505c <TIM_OC4_SetConfig+0xb0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <TIM_OC4_SetConfig+0x104>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00b      	beq.n	800505c <TIM_OC4_SetConfig+0xb0>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <TIM_OC4_SetConfig+0x108>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <TIM_OC4_SetConfig+0xb0>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a1a      	ldr	r2, [pc, #104]	; (80050b8 <TIM_OC4_SetConfig+0x10c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC4_SetConfig+0xb0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a19      	ldr	r2, [pc, #100]	; (80050bc <TIM_OC4_SetConfig+0x110>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d113      	bne.n	8005084 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005062:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800506a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	019b      	lsls	r3, r3, #6
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800

080050c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005104:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a17      	ldr	r2, [pc, #92]	; (8005174 <TIM_OC5_SetConfig+0xb4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00f      	beq.n	800513a <TIM_OC5_SetConfig+0x7a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a16      	ldr	r2, [pc, #88]	; (8005178 <TIM_OC5_SetConfig+0xb8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_OC5_SetConfig+0x7a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <TIM_OC5_SetConfig+0xbc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <TIM_OC5_SetConfig+0x7a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <TIM_OC5_SetConfig+0xc0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_OC5_SetConfig+0x7a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a13      	ldr	r2, [pc, #76]	; (8005184 <TIM_OC5_SetConfig+0xc4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d109      	bne.n	800514e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005140:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40013400 	.word	0x40013400
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800

08005188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	051b      	lsls	r3, r3, #20
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a18      	ldr	r2, [pc, #96]	; (8005240 <TIM_OC6_SetConfig+0xb8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00f      	beq.n	8005204 <TIM_OC6_SetConfig+0x7c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a17      	ldr	r2, [pc, #92]	; (8005244 <TIM_OC6_SetConfig+0xbc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00b      	beq.n	8005204 <TIM_OC6_SetConfig+0x7c>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a16      	ldr	r2, [pc, #88]	; (8005248 <TIM_OC6_SetConfig+0xc0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d007      	beq.n	8005204 <TIM_OC6_SetConfig+0x7c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a15      	ldr	r2, [pc, #84]	; (800524c <TIM_OC6_SetConfig+0xc4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_OC6_SetConfig+0x7c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a14      	ldr	r2, [pc, #80]	; (8005250 <TIM_OC6_SetConfig+0xc8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d109      	bne.n	8005218 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800520a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	029b      	lsls	r3, r3, #10
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40013400 	.word	0x40013400
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400
 8005250:	40014800 	.word	0x40014800

08005254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	2201      	movs	r2, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1a      	ldr	r2, [r3, #32]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	43db      	mvns	r3, r3
 8005276:	401a      	ands	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a1a      	ldr	r2, [r3, #32]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	fa01 f303 	lsl.w	r3, r1, r3
 800528c:	431a      	orrs	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
	...

080052a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e065      	b.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a2c      	ldr	r2, [pc, #176]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d004      	beq.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2b      	ldr	r2, [pc, #172]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d108      	bne.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005308:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d018      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532e:	d013      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a17      	ldr	r2, [pc, #92]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a12      	ldr	r2, [pc, #72]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a13      	ldr	r2, [pc, #76]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d10c      	bne.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800535e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40013400 	.word	0x40013400
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40014000 	.word	0x40014000

080053a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053bc:	2302      	movs	r3, #2
 80053be:	e087      	b.n	80054d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a27      	ldr	r2, [pc, #156]	; (80054dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a25      	ldr	r2, [pc, #148]	; (80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d106      	bne.n	800545c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1e      	ldr	r2, [pc, #120]	; (80054dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d126      	bne.n	80054be <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	051b      	lsls	r3, r3, #20
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a0d      	ldr	r2, [pc, #52]	; (80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d106      	bne.n	80054be <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40013400 	.word	0x40013400

080054e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005580:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005584:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	b29a      	uxth	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055a6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	4013      	ands	r3, r2
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055d4:	b084      	sub	sp, #16
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	f107 0014 	add.w	r0, r7, #20
 80055e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	b004      	add	sp, #16
 8005614:	4770      	bx	lr
	...

08005618 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005618:	b480      	push	{r7}
 800561a:	b09d      	sub	sp, #116	; 0x74
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	78db      	ldrb	r3, [r3, #3]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d81f      	bhi.n	800568a <USB_ActivateEndpoint+0x72>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <USB_ActivateEndpoint+0x38>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005661 	.word	0x08005661
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005693 	.word	0x08005693
 800565c:	0800566f 	.word	0x0800566f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005660:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005668:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800566c:	e012      	b.n	8005694 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800566e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005672:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005676:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800567a:	e00b      	b.n	8005694 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800567c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005680:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005684:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005688:	e004      	b.n	8005694 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005690:	e000      	b.n	8005694 <USB_ActivateEndpoint+0x7c>
      break;
 8005692:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	b21a      	sxth	r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	b21b      	sxth	r3, r3
 80056d6:	4313      	orrs	r3, r2
 80056d8:	b21b      	sxth	r3, r3
 80056da:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	441a      	add	r2, r3
 80056e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80056ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	7b1b      	ldrb	r3, [r3, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f040 8149 	bne.w	800599c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8084 	beq.w	800581c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571e:	b29b      	uxth	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	4413      	add	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	00da      	lsls	r2, r3, #3
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	88db      	ldrh	r3, [r3, #6]
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	b29b      	uxth	r3, r3
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	827b      	strh	r3, [r7, #18]
 8005756:	8a7b      	ldrh	r3, [r7, #18]
 8005758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01b      	beq.n	8005798 <USB_ActivateEndpoint+0x180>
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	823b      	strh	r3, [r7, #16]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	8a3b      	ldrh	r3, [r7, #16]
 8005784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800578c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005790:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	78db      	ldrb	r3, [r3, #3]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d020      	beq.n	80057e2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b6:	81bb      	strh	r3, [r7, #12]
 80057b8:	89bb      	ldrh	r3, [r7, #12]
 80057ba:	f083 0320 	eor.w	r3, r3, #32
 80057be:	81bb      	strh	r3, [r7, #12]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	89bb      	ldrh	r3, [r7, #12]
 80057cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]
 80057e0:	e2a6      	b.n	8005d30 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f8:	81fb      	strh	r3, [r7, #14]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	89fb      	ldrh	r3, [r7, #14]
 8005806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005816:	b29b      	uxth	r3, r3
 8005818:	8013      	strh	r3, [r2, #0]
 800581a:	e289      	b.n	8005d30 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	633b      	str	r3, [r7, #48]	; 0x30
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	4413      	add	r3, r2
 800582e:	633b      	str	r3, [r7, #48]	; 0x30
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	00da      	lsls	r2, r3, #3
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	4413      	add	r3, r2
 800583a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	88db      	ldrh	r3, [r3, #6]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	b29b      	uxth	r3, r3
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	4413      	add	r3, r2
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	00da      	lsls	r2, r3, #3
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	4413      	add	r3, r2
 800586e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b3e      	cmp	r3, #62	; 0x3e
 800587a:	d918      	bls.n	80058ae <USB_ActivateEndpoint+0x296>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	66bb      	str	r3, [r7, #104]	; 0x68
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	2b00      	cmp	r3, #0
 800588e:	d102      	bne.n	8005896 <USB_ActivateEndpoint+0x27e>
 8005890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005892:	3b01      	subs	r3, #1
 8005894:	66bb      	str	r3, [r7, #104]	; 0x68
 8005896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005898:	b29b      	uxth	r3, r3
 800589a:	029b      	lsls	r3, r3, #10
 800589c:	b29b      	uxth	r3, r3
 800589e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	e029      	b.n	8005902 <USB_ActivateEndpoint+0x2ea>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d112      	bne.n	80058dc <USB_ActivateEndpoint+0x2c4>
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	801a      	strh	r2, [r3, #0]
 80058da:	e012      	b.n	8005902 <USB_ActivateEndpoint+0x2ea>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <USB_ActivateEndpoint+0x2de>
 80058f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058f2:	3301      	adds	r3, #1
 80058f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	029b      	lsls	r3, r3, #10
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01b      	beq.n	8005952 <USB_ActivateEndpoint+0x33a>
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005930:	843b      	strh	r3, [r7, #32]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	441a      	add	r2, r3
 800593c:	8c3b      	ldrh	r3, [r7, #32]
 800593e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800594a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594e:	b29b      	uxth	r3, r3
 8005950:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005968:	83fb      	strh	r3, [r7, #30]
 800596a:	8bfb      	ldrh	r3, [r7, #30]
 800596c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005970:	83fb      	strh	r3, [r7, #30]
 8005972:	8bfb      	ldrh	r3, [r7, #30]
 8005974:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005978:	83fb      	strh	r3, [r7, #30]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	441a      	add	r2, r3
 8005984:	8bfb      	ldrh	r3, [r7, #30]
 8005986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
 800599a:	e1c9      	b.n	8005d30 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	78db      	ldrb	r3, [r3, #3]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d11e      	bne.n	80059e2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	441a      	add	r2, r3
 80059c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059dc:	b29b      	uxth	r3, r3
 80059de:	8013      	strh	r3, [r2, #0]
 80059e0:	e01d      	b.n	8005a1e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a2e:	4413      	add	r3, r2
 8005a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	00da      	lsls	r2, r3, #3
 8005a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a40:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	891b      	ldrh	r3, [r3, #8]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	657b      	str	r3, [r7, #84]	; 0x54
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a62:	4413      	add	r3, r2
 8005a64:	657b      	str	r3, [r7, #84]	; 0x54
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	00da      	lsls	r2, r3, #3
 8005a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a74:	653b      	str	r3, [r7, #80]	; 0x50
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	895b      	ldrh	r3, [r3, #10]
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a84:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f040 8093 	bne.w	8005bb6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005aa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01b      	beq.n	8005ae4 <USB_ActivateEndpoint+0x4cc>
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	441a      	add	r2, r3
 8005ace:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005af2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <USB_ActivateEndpoint+0x51c>
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b52:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b5a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	441a      	add	r2, r3
 8005b66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b92:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	441a      	add	r2, r3
 8005b9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	8013      	strh	r3, [r2, #0]
 8005bb4:	e0bc      	b.n	8005d30 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005bc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01d      	beq.n	8005c0e <USB_ActivateEndpoint+0x5f6>
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005c1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01d      	beq.n	8005c66 <USB_ActivateEndpoint+0x64e>
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	441a      	add	r2, r3
 8005c4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	78db      	ldrb	r3, [r3, #3]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d024      	beq.n	8005cb8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c8c:	f083 0320 	eor.w	r3, r3, #32
 8005c90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	441a      	add	r2, r3
 8005c9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]
 8005cb6:	e01d      	b.n	8005cf4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	441a      	add	r2, r3
 8005cdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3774      	adds	r7, #116	; 0x74
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b08d      	sub	sp, #52	; 0x34
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	7b1b      	ldrb	r3, [r3, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 808e 	bne.w	8005e70 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d044      	beq.n	8005de6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	81bb      	strh	r3, [r7, #12]
 8005d6a:	89bb      	ldrh	r3, [r7, #12]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01b      	beq.n	8005dac <USB_DeactivateEndpoint+0x6c>
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	817b      	strh	r3, [r7, #10]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	897b      	ldrh	r3, [r7, #10]
 8005d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc2:	813b      	strh	r3, [r7, #8]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	893b      	ldrh	r3, [r7, #8]
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]
 8005de4:	e192      	b.n	800610c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	827b      	strh	r3, [r7, #18]
 8005df4:	8a7b      	ldrh	r3, [r7, #18]
 8005df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01b      	beq.n	8005e36 <USB_DeactivateEndpoint+0xf6>
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	823b      	strh	r3, [r7, #16]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	441a      	add	r2, r3
 8005e20:	8a3b      	ldrh	r3, [r7, #16]
 8005e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4c:	81fb      	strh	r3, [r7, #14]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	89fb      	ldrh	r3, [r7, #14]
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]
 8005e6e:	e14d      	b.n	800610c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 80a5 	bne.w	8005fc4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	843b      	strh	r3, [r7, #32]
 8005e88:	8c3b      	ldrh	r3, [r7, #32]
 8005e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01b      	beq.n	8005eca <USB_DeactivateEndpoint+0x18a>
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea8:	83fb      	strh	r3, [r7, #30]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	441a      	add	r2, r3
 8005eb4:	8bfb      	ldrh	r3, [r7, #30]
 8005eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	83bb      	strh	r3, [r7, #28]
 8005ed8:	8bbb      	ldrh	r3, [r7, #28]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01b      	beq.n	8005f1a <USB_DeactivateEndpoint+0x1da>
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef8:	837b      	strh	r3, [r7, #26]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	8b7b      	ldrh	r3, [r7, #26]
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	833b      	strh	r3, [r7, #24]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	8b3b      	ldrh	r3, [r7, #24]
 8005f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f68:	82fb      	strh	r3, [r7, #22]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	8afb      	ldrh	r3, [r7, #22]
 8005f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa0:	82bb      	strh	r3, [r7, #20]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	441a      	add	r2, r3
 8005fac:	8abb      	ldrh	r3, [r7, #20]
 8005fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	8013      	strh	r3, [r2, #0]
 8005fc2:	e0a3      	b.n	800610c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01b      	beq.n	8006014 <USB_DeactivateEndpoint+0x2d4>
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800600c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006022:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01b      	beq.n	8006064 <USB_DeactivateEndpoint+0x324>
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	853b      	strh	r3, [r7, #40]	; 0x28
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006060:	b29b      	uxth	r3, r3
 8006062:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006098:	b29b      	uxth	r3, r3
 800609a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	441a      	add	r2, r3
 80060be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	441a      	add	r2, r3
 80060f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006108:	b29b      	uxth	r3, r3
 800610a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3734      	adds	r7, #52	; 0x34
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b0c2      	sub	sp, #264	; 0x108
 800611e:	af00      	add	r7, sp, #0
 8006120:	1d3b      	adds	r3, r7, #4
 8006122:	6018      	str	r0, [r3, #0]
 8006124:	463b      	mov	r3, r7
 8006126:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006128:	463b      	mov	r3, r7
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	2b01      	cmp	r3, #1
 8006130:	f040 8509 	bne.w	8006b46 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006134:	463b      	mov	r3, r7
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	463b      	mov	r3, r7
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	429a      	cmp	r2, r3
 8006142:	d905      	bls.n	8006150 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006144:	463b      	mov	r3, r7
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800614e:	e004      	b.n	800615a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800615a:	463b      	mov	r3, r7
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	7b1b      	ldrb	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d128      	bne.n	80061b6 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6959      	ldr	r1, [r3, #20]
 800616a:	463b      	mov	r3, r7
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	88da      	ldrh	r2, [r3, #6]
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006174:	b29b      	uxth	r3, r3
 8006176:	1d38      	adds	r0, r7, #4
 8006178:	6800      	ldr	r0, [r0, #0]
 800617a:	f001 f9da 	bl	8007532 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	1d3b      	adds	r3, r7, #4
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	463b      	mov	r3, r7
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	00da      	lsls	r2, r3, #3
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4413      	add	r3, r2
 80061a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	f000 bc9f 	b.w	8006af4 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80061b6:	463b      	mov	r3, r7
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	78db      	ldrb	r3, [r3, #3]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	f040 8347 	bne.w	8006850 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	463b      	mov	r3, r7
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	f240 82eb 	bls.w	80067aa <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80061d4:	1d3b      	adds	r3, r7, #4
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	441a      	add	r2, r3
 8006200:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800620c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006214:	b29b      	uxth	r3, r3
 8006216:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6a1a      	ldr	r2, [r3, #32]
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006222:	1ad2      	subs	r2, r2, r3
 8006224:	463b      	mov	r3, r7
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800622a:	1d3b      	adds	r3, r7, #4
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 8159 	beq.w	80064f8 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
 800624c:	463b      	mov	r3, r7
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d164      	bne.n	8006320 <USB_EPStartXfer+0x206>
 8006256:	1d3b      	adds	r3, r7, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28
 800625c:	1d3b      	adds	r3, r7, #4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006264:	b29b      	uxth	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	4413      	add	r3, r2
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
 800626e:	463b      	mov	r3, r7
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	00da      	lsls	r2, r3, #3
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	4413      	add	r3, r2
 800627a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006284:	2b3e      	cmp	r3, #62	; 0x3e
 8006286:	d91c      	bls.n	80062c2 <USB_EPStartXfer+0x1a8>
 8006288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <USB_EPStartXfer+0x18e>
 800629e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062a2:	3b01      	subs	r3, #1
 80062a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	029b      	lsls	r3, r3, #10
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	801a      	strh	r2, [r3, #0]
 80062c0:	e04a      	b.n	8006358 <USB_EPStartXfer+0x23e>
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d112      	bne.n	80062f0 <USB_EPStartXfer+0x1d6>
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e033      	b.n	8006358 <USB_EPStartXfer+0x23e>
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d004      	beq.n	8006310 <USB_EPStartXfer+0x1f6>
 8006306:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800630a:	3301      	adds	r3, #1
 800630c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006310:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006314:	b29b      	uxth	r3, r3
 8006316:	029b      	lsls	r3, r3, #10
 8006318:	b29a      	uxth	r2, r3
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e01b      	b.n	8006358 <USB_EPStartXfer+0x23e>
 8006320:	463b      	mov	r3, r7
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d116      	bne.n	8006358 <USB_EPStartXfer+0x23e>
 800632a:	1d3b      	adds	r3, r7, #4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006332:	b29b      	uxth	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	4413      	add	r3, r2
 800633a:	633b      	str	r3, [r7, #48]	; 0x30
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	00da      	lsls	r2, r3, #3
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	4413      	add	r3, r2
 8006348:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800634c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006352:	b29a      	uxth	r2, r3
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	895b      	ldrh	r3, [r3, #10]
 800635e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006362:	463b      	mov	r3, r7
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6959      	ldr	r1, [r3, #20]
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636c:	b29b      	uxth	r3, r3
 800636e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006372:	1d38      	adds	r0, r7, #4
 8006374:	6800      	ldr	r0, [r0, #0]
 8006376:	f001 f8dc 	bl	8007532 <USB_WritePMA>
            ep->xfer_buff += len;
 800637a:	463b      	mov	r3, r7
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006384:	441a      	add	r2, r3
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800638c:	463b      	mov	r3, r7
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a1a      	ldr	r2, [r3, #32]
 8006392:	463b      	mov	r3, r7
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	429a      	cmp	r2, r3
 800639a:	d909      	bls.n	80063b0 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800639c:	463b      	mov	r3, r7
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a1a      	ldr	r2, [r3, #32]
 80063a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a6:	1ad2      	subs	r2, r2, r3
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	621a      	str	r2, [r3, #32]
 80063ae:	e008      	b.n	80063c2 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 80063b0:	463b      	mov	r3, r7
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80063ba:	463b      	mov	r3, r7
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2200      	movs	r2, #0
 80063c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063c2:	463b      	mov	r3, r7
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d164      	bne.n	8006496 <USB_EPStartXfer+0x37c>
 80063cc:	1d3b      	adds	r3, r7, #4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	1d3b      	adds	r3, r7, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4413      	add	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	463b      	mov	r3, r7
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	00da      	lsls	r2, r3, #3
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	4413      	add	r3, r2
 80063f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fa:	2b3e      	cmp	r3, #62	; 0x3e
 80063fc:	d91c      	bls.n	8006438 <USB_EPStartXfer+0x31e>
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <USB_EPStartXfer+0x304>
 8006414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006418:	3b01      	subs	r3, #1
 800641a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800641e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006422:	b29b      	uxth	r3, r3
 8006424:	029b      	lsls	r3, r3, #10
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006430:	b29a      	uxth	r2, r3
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	e04d      	b.n	80064d4 <USB_EPStartXfer+0x3ba>
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643c:	2b00      	cmp	r3, #0
 800643e:	d112      	bne.n	8006466 <USB_EPStartXfer+0x34c>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800644a:	b29a      	uxth	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645e:	b29a      	uxth	r2, r3
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	e036      	b.n	80064d4 <USB_EPStartXfer+0x3ba>
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <USB_EPStartXfer+0x36c>
 800647c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006480:	3301      	adds	r3, #1
 8006482:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800648a:	b29b      	uxth	r3, r3
 800648c:	029b      	lsls	r3, r3, #10
 800648e:	b29a      	uxth	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	e01e      	b.n	80064d4 <USB_EPStartXfer+0x3ba>
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d119      	bne.n	80064d4 <USB_EPStartXfer+0x3ba>
 80064a0:	1d3b      	adds	r3, r7, #4
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	1d3b      	adds	r3, r7, #4
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	4413      	add	r3, r2
 80064b6:	623b      	str	r3, [r7, #32]
 80064b8:	463b      	mov	r3, r7
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	00da      	lsls	r2, r3, #3
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	4413      	add	r3, r2
 80064c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064d4:	463b      	mov	r3, r7
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	891b      	ldrh	r3, [r3, #8]
 80064da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064de:	463b      	mov	r3, r7
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6959      	ldr	r1, [r3, #20]
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064ee:	1d38      	adds	r0, r7, #4
 80064f0:	6800      	ldr	r0, [r0, #0]
 80064f2:	f001 f81e 	bl	8007532 <USB_WritePMA>
 80064f6:	e2fd      	b.n	8006af4 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d164      	bne.n	80065cc <USB_EPStartXfer+0x4b2>
 8006502:	1d3b      	adds	r3, r7, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	64bb      	str	r3, [r7, #72]	; 0x48
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006510:	b29b      	uxth	r3, r3
 8006512:	461a      	mov	r2, r3
 8006514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006516:	4413      	add	r3, r2
 8006518:	64bb      	str	r3, [r7, #72]	; 0x48
 800651a:	463b      	mov	r3, r7
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	00da      	lsls	r2, r3, #3
 8006522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006524:	4413      	add	r3, r2
 8006526:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800652a:	647b      	str	r3, [r7, #68]	; 0x44
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006530:	2b3e      	cmp	r3, #62	; 0x3e
 8006532:	d91c      	bls.n	800656e <USB_EPStartXfer+0x454>
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <USB_EPStartXfer+0x43a>
 800654a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800654e:	3b01      	subs	r3, #1
 8006550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006554:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006558:	b29b      	uxth	r3, r3
 800655a:	029b      	lsls	r3, r3, #10
 800655c:	b29b      	uxth	r3, r3
 800655e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006566:	b29a      	uxth	r2, r3
 8006568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	e04d      	b.n	800660a <USB_EPStartXfer+0x4f0>
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006572:	2b00      	cmp	r3, #0
 8006574:	d112      	bne.n	800659c <USB_EPStartXfer+0x482>
 8006576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006580:	b29a      	uxth	r2, r3
 8006582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	e036      	b.n	800660a <USB_EPStartXfer+0x4f0>
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <USB_EPStartXfer+0x4a2>
 80065b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065b6:	3301      	adds	r3, #1
 80065b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	029b      	lsls	r3, r3, #10
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e01e      	b.n	800660a <USB_EPStartXfer+0x4f0>
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d119      	bne.n	800660a <USB_EPStartXfer+0x4f0>
 80065d6:	1d3b      	adds	r3, r7, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	653b      	str	r3, [r7, #80]	; 0x50
 80065dc:	1d3b      	adds	r3, r7, #4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ea:	4413      	add	r3, r2
 80065ec:	653b      	str	r3, [r7, #80]	; 0x50
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	00da      	lsls	r2, r3, #3
 80065f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f8:	4413      	add	r3, r2
 80065fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006604:	b29a      	uxth	r2, r3
 8006606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006608:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800660a:	463b      	mov	r3, r7
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	891b      	ldrh	r3, [r3, #8]
 8006610:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6959      	ldr	r1, [r3, #20]
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661e:	b29b      	uxth	r3, r3
 8006620:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006624:	1d38      	adds	r0, r7, #4
 8006626:	6800      	ldr	r0, [r0, #0]
 8006628:	f000 ff83 	bl	8007532 <USB_WritePMA>
            ep->xfer_buff += len;
 800662c:	463b      	mov	r3, r7
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695a      	ldr	r2, [r3, #20]
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006636:	441a      	add	r2, r3
 8006638:	463b      	mov	r3, r7
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800663e:	463b      	mov	r3, r7
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6a1a      	ldr	r2, [r3, #32]
 8006644:	463b      	mov	r3, r7
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	429a      	cmp	r2, r3
 800664c:	d909      	bls.n	8006662 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800664e:	463b      	mov	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6a1a      	ldr	r2, [r3, #32]
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006658:	1ad2      	subs	r2, r2, r3
 800665a:	463b      	mov	r3, r7
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	621a      	str	r2, [r3, #32]
 8006660:	e008      	b.n	8006674 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006662:	463b      	mov	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800666c:	463b      	mov	r3, r7
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2200      	movs	r2, #0
 8006672:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006674:	1d3b      	adds	r3, r7, #4
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	643b      	str	r3, [r7, #64]	; 0x40
 800667a:	463b      	mov	r3, r7
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d164      	bne.n	800674e <USB_EPStartXfer+0x634>
 8006684:	1d3b      	adds	r3, r7, #4
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	63bb      	str	r3, [r7, #56]	; 0x38
 800668a:	1d3b      	adds	r3, r7, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006692:	b29b      	uxth	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	4413      	add	r3, r2
 800669a:	63bb      	str	r3, [r7, #56]	; 0x38
 800669c:	463b      	mov	r3, r7
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	00da      	lsls	r2, r3, #3
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	4413      	add	r3, r2
 80066a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b2:	2b3e      	cmp	r3, #62	; 0x3e
 80066b4:	d91c      	bls.n	80066f0 <USB_EPStartXfer+0x5d6>
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <USB_EPStartXfer+0x5bc>
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d0:	3b01      	subs	r3, #1
 80066d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066da:	b29b      	uxth	r3, r3
 80066dc:	029b      	lsls	r3, r3, #10
 80066de:	b29b      	uxth	r3, r3
 80066e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e04a      	b.n	8006786 <USB_EPStartXfer+0x66c>
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d112      	bne.n	800671e <USB_EPStartXfer+0x604>
 80066f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006702:	b29a      	uxth	r2, r3
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006716:	b29a      	uxth	r2, r3
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e033      	b.n	8006786 <USB_EPStartXfer+0x66c>
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <USB_EPStartXfer+0x624>
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	3301      	adds	r3, #1
 800673a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800673e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29a      	uxth	r2, r3
 8006748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	e01b      	b.n	8006786 <USB_EPStartXfer+0x66c>
 800674e:	463b      	mov	r3, r7
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d116      	bne.n	8006786 <USB_EPStartXfer+0x66c>
 8006758:	1d3b      	adds	r3, r7, #4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006760:	b29b      	uxth	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006766:	4413      	add	r3, r2
 8006768:	643b      	str	r3, [r7, #64]	; 0x40
 800676a:	463b      	mov	r3, r7
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	00da      	lsls	r2, r3, #3
 8006772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006774:	4413      	add	r3, r2
 8006776:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006780:	b29a      	uxth	r2, r3
 8006782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006784:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	895b      	ldrh	r3, [r3, #10]
 800678c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006790:	463b      	mov	r3, r7
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6959      	ldr	r1, [r3, #20]
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679a:	b29b      	uxth	r3, r3
 800679c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067a0:	1d38      	adds	r0, r7, #4
 80067a2:	6800      	ldr	r0, [r0, #0]
 80067a4:	f000 fec5 	bl	8007532 <USB_WritePMA>
 80067a8:	e1a4      	b.n	8006af4 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80067aa:	463b      	mov	r3, r7
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80067b4:	1d3b      	adds	r3, r7, #4
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	463b      	mov	r3, r7
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80067d2:	1d3b      	adds	r3, r7, #4
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	463b      	mov	r3, r7
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	441a      	add	r2, r3
 80067e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80067e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80067f8:	1d3b      	adds	r3, r7, #4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006806:	b29b      	uxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800680c:	4413      	add	r3, r2
 800680e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006810:	463b      	mov	r3, r7
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	00da      	lsls	r2, r3, #3
 8006818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800681a:	4413      	add	r3, r2
 800681c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006820:	65bb      	str	r3, [r7, #88]	; 0x58
 8006822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006826:	b29a      	uxth	r2, r3
 8006828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800682a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	891b      	ldrh	r3, [r3, #8]
 8006832:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006836:	463b      	mov	r3, r7
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6959      	ldr	r1, [r3, #20]
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006840:	b29b      	uxth	r3, r3
 8006842:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006846:	1d38      	adds	r0, r7, #4
 8006848:	6800      	ldr	r0, [r0, #0]
 800684a:	f000 fe72 	bl	8007532 <USB_WritePMA>
 800684e:	e151      	b.n	8006af4 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006862:	1d3b      	adds	r3, r7, #4
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	463b      	mov	r3, r7
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 809b 	beq.w	80069b4 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800687e:	1d3b      	adds	r3, r7, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	673b      	str	r3, [r7, #112]	; 0x70
 8006884:	463b      	mov	r3, r7
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d164      	bne.n	8006958 <USB_EPStartXfer+0x83e>
 800688e:	1d3b      	adds	r3, r7, #4
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	66bb      	str	r3, [r7, #104]	; 0x68
 8006894:	1d3b      	adds	r3, r7, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800689c:	b29b      	uxth	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068a2:	4413      	add	r3, r2
 80068a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80068a6:	463b      	mov	r3, r7
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	00da      	lsls	r2, r3, #3
 80068ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068b0:	4413      	add	r3, r2
 80068b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068b6:	667b      	str	r3, [r7, #100]	; 0x64
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068bc:	2b3e      	cmp	r3, #62	; 0x3e
 80068be:	d91c      	bls.n	80068fa <USB_EPStartXfer+0x7e0>
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <USB_EPStartXfer+0x7c6>
 80068d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80068da:	3b01      	subs	r3, #1
 80068dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	029b      	lsls	r3, r3, #10
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	e04a      	b.n	8006990 <USB_EPStartXfer+0x876>
 80068fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d112      	bne.n	8006928 <USB_EPStartXfer+0x80e>
 8006902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800690c:	b29a      	uxth	r2, r3
 800690e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006920:	b29a      	uxth	r2, r3
 8006922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006924:	801a      	strh	r2, [r3, #0]
 8006926:	e033      	b.n	8006990 <USB_EPStartXfer+0x876>
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <USB_EPStartXfer+0x82e>
 800693e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006942:	3301      	adds	r3, #1
 8006944:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006948:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800694c:	b29b      	uxth	r3, r3
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	b29a      	uxth	r2, r3
 8006952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006954:	801a      	strh	r2, [r3, #0]
 8006956:	e01b      	b.n	8006990 <USB_EPStartXfer+0x876>
 8006958:	463b      	mov	r3, r7
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d116      	bne.n	8006990 <USB_EPStartXfer+0x876>
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696a:	b29b      	uxth	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006970:	4413      	add	r3, r2
 8006972:	673b      	str	r3, [r7, #112]	; 0x70
 8006974:	463b      	mov	r3, r7
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	00da      	lsls	r2, r3, #3
 800697c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800697e:	4413      	add	r3, r2
 8006980:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006984:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698a:	b29a      	uxth	r2, r3
 800698c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006990:	463b      	mov	r3, r7
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	895b      	ldrh	r3, [r3, #10]
 8006996:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800699a:	463b      	mov	r3, r7
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6959      	ldr	r1, [r3, #20]
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069aa:	1d38      	adds	r0, r7, #4
 80069ac:	6800      	ldr	r0, [r0, #0]
 80069ae:	f000 fdc0 	bl	8007532 <USB_WritePMA>
 80069b2:	e09f      	b.n	8006af4 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069b4:	463b      	mov	r3, r7
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	785b      	ldrb	r3, [r3, #1]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d164      	bne.n	8006a88 <USB_EPStartXfer+0x96e>
 80069be:	1d3b      	adds	r3, r7, #4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069c4:	1d3b      	adds	r3, r7, #4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069d2:	4413      	add	r3, r2
 80069d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069d6:	463b      	mov	r3, r7
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	00da      	lsls	r2, r3, #3
 80069de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069e0:	4413      	add	r3, r2
 80069e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80069e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ec:	2b3e      	cmp	r3, #62	; 0x3e
 80069ee:	d91c      	bls.n	8006a2a <USB_EPStartXfer+0x910>
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <USB_EPStartXfer+0x8f6>
 8006a06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	029b      	lsls	r3, r3, #10
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	e053      	b.n	8006ad2 <USB_EPStartXfer+0x9b8>
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d112      	bne.n	8006a58 <USB_EPStartXfer+0x93e>
 8006a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a54:	801a      	strh	r2, [r3, #0]
 8006a56:	e03c      	b.n	8006ad2 <USB_EPStartXfer+0x9b8>
 8006a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5c:	085b      	lsrs	r3, r3, #1
 8006a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d004      	beq.n	8006a78 <USB_EPStartXfer+0x95e>
 8006a6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a72:	3301      	adds	r3, #1
 8006a74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	029b      	lsls	r3, r3, #10
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	e024      	b.n	8006ad2 <USB_EPStartXfer+0x9b8>
 8006a88:	463b      	mov	r3, r7
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d11f      	bne.n	8006ad2 <USB_EPStartXfer+0x9b8>
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a9a:	1d3b      	adds	r3, r7, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aaa:	4413      	add	r3, r2
 8006aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	00da      	lsls	r2, r3, #3
 8006ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006abc:	4413      	add	r3, r2
 8006abe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ad0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	891b      	ldrh	r3, [r3, #8]
 8006ad8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006adc:	463b      	mov	r3, r7
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6959      	ldr	r1, [r3, #20]
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006aec:	1d38      	adds	r0, r7, #4
 8006aee:	6800      	ldr	r0, [r0, #0]
 8006af0:	f000 fd1f 	bl	8007532 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006af4:	1d3b      	adds	r3, r7, #4
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	463b      	mov	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0e:	817b      	strh	r3, [r7, #10]
 8006b10:	897b      	ldrh	r3, [r7, #10]
 8006b12:	f083 0310 	eor.w	r3, r3, #16
 8006b16:	817b      	strh	r3, [r7, #10]
 8006b18:	897b      	ldrh	r3, [r7, #10]
 8006b1a:	f083 0320 	eor.w	r3, r3, #32
 8006b1e:	817b      	strh	r3, [r7, #10]
 8006b20:	1d3b      	adds	r3, r7, #4
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	463b      	mov	r3, r7
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	441a      	add	r2, r3
 8006b2e:	897b      	ldrh	r3, [r7, #10]
 8006b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	8013      	strh	r3, [r2, #0]
 8006b44:	e3b5      	b.n	80072b2 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b46:	463b      	mov	r3, r7
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	7b1b      	ldrb	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 8090 	bne.w	8006c72 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b52:	463b      	mov	r3, r7
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d90e      	bls.n	8006b80 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8006b62:	463b      	mov	r3, r7
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b76:	1ad2      	subs	r2, r2, r3
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	619a      	str	r2, [r3, #24]
 8006b7e:	e008      	b.n	8006b92 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8006b80:	463b      	mov	r3, r7
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b92:	1d3b      	adds	r3, r7, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b9a:	1d3b      	adds	r3, r7, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006baa:	4413      	add	r3, r2
 8006bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bb0:	463b      	mov	r3, r7
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	00da      	lsls	r2, r3, #3
 8006bb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bca:	2b3e      	cmp	r3, #62	; 0x3e
 8006bcc:	d91d      	bls.n	8006c0a <USB_EPStartXfer+0xaf0>
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <USB_EPStartXfer+0xad4>
 8006be4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006be8:	3b01      	subs	r3, #1
 8006bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	029b      	lsls	r3, r3, #10
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e325      	b.n	8007256 <USB_EPStartXfer+0x113c>
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d116      	bne.n	8006c40 <USB_EPStartXfer+0xb26>
 8006c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	e30a      	b.n	8007256 <USB_EPStartXfer+0x113c>
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c44:	085b      	lsrs	r3, r3, #1
 8006c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <USB_EPStartXfer+0xb46>
 8006c56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	029b      	lsls	r3, r3, #10
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e2f1      	b.n	8007256 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c72:	463b      	mov	r3, r7
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	78db      	ldrb	r3, [r3, #3]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	f040 818f 	bne.w	8006f9c <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c7e:	463b      	mov	r3, r7
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d175      	bne.n	8006d74 <USB_EPStartXfer+0xc5a>
 8006c88:	1d3b      	adds	r3, r7, #4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c90:	1d3b      	adds	r3, r7, #4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	00da      	lsls	r2, r3, #3
 8006cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b3e      	cmp	r3, #62	; 0x3e
 8006cc4:	d91f      	bls.n	8006d06 <USB_EPStartXfer+0xbec>
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <USB_EPStartXfer+0xbd0>
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d02:	801a      	strh	r2, [r3, #0]
 8006d04:	e05c      	b.n	8006dc0 <USB_EPStartXfer+0xca6>
 8006d06:	463b      	mov	r3, r7
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d116      	bne.n	8006d3e <USB_EPStartXfer+0xc24>
 8006d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e040      	b.n	8006dc0 <USB_EPStartXfer+0xca6>
 8006d3e:	463b      	mov	r3, r7
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <USB_EPStartXfer+0xc48>
 8006d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	029b      	lsls	r3, r3, #10
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	e025      	b.n	8006dc0 <USB_EPStartXfer+0xca6>
 8006d74:	463b      	mov	r3, r7
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d120      	bne.n	8006dc0 <USB_EPStartXfer+0xca6>
 8006d7e:	1d3b      	adds	r3, r7, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d86:	1d3b      	adds	r3, r7, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d96:	4413      	add	r3, r2
 8006d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	00da      	lsls	r2, r3, #3
 8006da4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006da8:	4413      	add	r3, r2
 8006daa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006db2:	463b      	mov	r3, r7
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	1d3b      	adds	r3, r7, #4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006dc8:	463b      	mov	r3, r7
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d175      	bne.n	8006ebe <USB_EPStartXfer+0xda4>
 8006dd2:	1d3b      	adds	r3, r7, #4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dda:	1d3b      	adds	r3, r7, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dea:	4413      	add	r3, r2
 8006dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	00da      	lsls	r2, r3, #3
 8006df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e06:	463b      	mov	r3, r7
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e0e:	d91f      	bls.n	8006e50 <USB_EPStartXfer+0xd36>
 8006e10:	463b      	mov	r3, r7
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e1c:	463b      	mov	r3, r7
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <USB_EPStartXfer+0xd1a>
 8006e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	029b      	lsls	r3, r3, #10
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	e058      	b.n	8006f02 <USB_EPStartXfer+0xde8>
 8006e50:	463b      	mov	r3, r7
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d116      	bne.n	8006e88 <USB_EPStartXfer+0xd6e>
 8006e5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e6c:	801a      	strh	r2, [r3, #0]
 8006e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e03c      	b.n	8006f02 <USB_EPStartXfer+0xde8>
 8006e88:	463b      	mov	r3, r7
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e94:	463b      	mov	r3, r7
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <USB_EPStartXfer+0xd92>
 8006ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	029b      	lsls	r3, r3, #10
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	e021      	b.n	8006f02 <USB_EPStartXfer+0xde8>
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d11c      	bne.n	8006f02 <USB_EPStartXfer+0xde8>
 8006ec8:	1d3b      	adds	r3, r7, #4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ed8:	4413      	add	r3, r2
 8006eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ede:	463b      	mov	r3, r7
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	00da      	lsls	r2, r3, #3
 8006ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006eea:	4413      	add	r3, r2
 8006eec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f00:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f02:	463b      	mov	r3, r7
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 81a4 	beq.w	8007256 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <USB_EPStartXfer+0xe20>
 8006f2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10d      	bne.n	8006f56 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 8187 	bne.w	8007256 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f040 8180 	bne.w	8007256 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006f56:	1d3b      	adds	r3, r7, #4
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f70:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006f74:	1d3b      	adds	r3, r7, #4
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	463b      	mov	r3, r7
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	441a      	add	r2, r3
 8006f82:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	8013      	strh	r3, [r2, #0]
 8006f9a:	e15c      	b.n	8007256 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006f9c:	463b      	mov	r3, r7
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	78db      	ldrb	r3, [r3, #3]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	f040 8155 	bne.w	8007252 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006fa8:	463b      	mov	r3, r7
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	463b      	mov	r3, r7
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d90e      	bls.n	8006fd6 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8006fb8:	463b      	mov	r3, r7
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699a      	ldr	r2, [r3, #24]
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fcc:	1ad2      	subs	r2, r2, r3
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	619a      	str	r2, [r3, #24]
 8006fd4:	e008      	b.n	8006fe8 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8006fd6:	463b      	mov	r3, r7
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006fe8:	463b      	mov	r3, r7
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d16f      	bne.n	80070d2 <USB_EPStartXfer+0xfb8>
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ffa:	1d3b      	adds	r3, r7, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007002:	b29b      	uxth	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800700a:	4413      	add	r3, r2
 800700c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007010:	463b      	mov	r3, r7
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00da      	lsls	r2, r3, #3
 8007018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800701c:	4413      	add	r3, r2
 800701e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702a:	2b3e      	cmp	r3, #62	; 0x3e
 800702c:	d91d      	bls.n	800706a <USB_EPStartXfer+0xf50>
 800702e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703c:	f003 031f 	and.w	r3, r3, #31
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <USB_EPStartXfer+0xf34>
 8007044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007048:	3b01      	subs	r3, #1
 800704a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800704e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007052:	b29b      	uxth	r3, r3
 8007054:	029b      	lsls	r3, r3, #10
 8007056:	b29b      	uxth	r3, r3
 8007058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007060:	b29a      	uxth	r2, r3
 8007062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e058      	b.n	800711c <USB_EPStartXfer+0x1002>
 800706a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706e:	2b00      	cmp	r3, #0
 8007070:	d116      	bne.n	80070a0 <USB_EPStartXfer+0xf86>
 8007072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800707e:	b29a      	uxth	r2, r3
 8007080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007096:	b29a      	uxth	r2, r3
 8007098:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e03d      	b.n	800711c <USB_EPStartXfer+0x1002>
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <USB_EPStartXfer+0xfa6>
 80070b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ba:	3301      	adds	r3, #1
 80070bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	029b      	lsls	r3, r3, #10
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ce:	801a      	strh	r2, [r3, #0]
 80070d0:	e024      	b.n	800711c <USB_EPStartXfer+0x1002>
 80070d2:	463b      	mov	r3, r7
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d11f      	bne.n	800711c <USB_EPStartXfer+0x1002>
 80070dc:	1d3b      	adds	r3, r7, #4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80070e4:	1d3b      	adds	r3, r7, #4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070f4:	4413      	add	r3, r2
 80070f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80070fa:	463b      	mov	r3, r7
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	00da      	lsls	r2, r3, #3
 8007102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007106:	4413      	add	r3, r2
 8007108:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800710c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	b29a      	uxth	r2, r3
 8007116:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007124:	463b      	mov	r3, r7
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d16f      	bne.n	800720e <USB_EPStartXfer+0x10f4>
 800712e:	1d3b      	adds	r3, r7, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007136:	1d3b      	adds	r3, r7, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713e:	b29b      	uxth	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007146:	4413      	add	r3, r2
 8007148:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	00da      	lsls	r2, r3, #3
 8007154:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007158:	4413      	add	r3, r2
 800715a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800715e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007166:	2b3e      	cmp	r3, #62	; 0x3e
 8007168:	d91d      	bls.n	80071a6 <USB_EPStartXfer+0x108c>
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <USB_EPStartXfer+0x1070>
 8007180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007184:	3b01      	subs	r3, #1
 8007186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800718a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719c:	b29a      	uxth	r2, r3
 800719e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071a2:	801a      	strh	r2, [r3, #0]
 80071a4:	e057      	b.n	8007256 <USB_EPStartXfer+0x113c>
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d116      	bne.n	80071dc <USB_EPStartXfer+0x10c2>
 80071ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	e03c      	b.n	8007256 <USB_EPStartXfer+0x113c>
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d004      	beq.n	80071fc <USB_EPStartXfer+0x10e2>
 80071f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071f6:	3301      	adds	r3, #1
 80071f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007200:	b29b      	uxth	r3, r3
 8007202:	029b      	lsls	r3, r3, #10
 8007204:	b29a      	uxth	r2, r3
 8007206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	e023      	b.n	8007256 <USB_EPStartXfer+0x113c>
 800720e:	463b      	mov	r3, r7
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	785b      	ldrb	r3, [r3, #1]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d11e      	bne.n	8007256 <USB_EPStartXfer+0x113c>
 8007218:	1d3b      	adds	r3, r7, #4
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007220:	b29b      	uxth	r3, r3
 8007222:	461a      	mov	r2, r3
 8007224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007228:	4413      	add	r3, r2
 800722a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800722e:	463b      	mov	r3, r7
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	00da      	lsls	r2, r3, #3
 8007236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800723a:	4413      	add	r3, r2
 800723c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007240:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007248:	b29a      	uxth	r2, r3
 800724a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	e001      	b.n	8007256 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e02e      	b.n	80072b4 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007256:	1d3b      	adds	r3, r7, #4
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	463b      	mov	r3, r7
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800726c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007270:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007274:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007278:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800727c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007280:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007284:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007288:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800728c:	1d3b      	adds	r3, r7, #4
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	463b      	mov	r3, r7
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	441a      	add	r2, r3
 800729a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800729e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d020      	beq.n	8007312 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e6:	81bb      	strh	r3, [r7, #12]
 80072e8:	89bb      	ldrh	r3, [r7, #12]
 80072ea:	f083 0310 	eor.w	r3, r3, #16
 80072ee:	81bb      	strh	r3, [r7, #12]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	441a      	add	r2, r3
 80072fa:	89bb      	ldrh	r3, [r7, #12]
 80072fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730c:	b29b      	uxth	r3, r3
 800730e:	8013      	strh	r3, [r2, #0]
 8007310:	e01f      	b.n	8007352 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007328:	81fb      	strh	r3, [r7, #14]
 800732a:	89fb      	ldrh	r3, [r7, #14]
 800732c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007330:	81fb      	strh	r3, [r7, #14]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	441a      	add	r2, r3
 800733c:	89fb      	ldrh	r3, [r7, #14]
 800733e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734e:	b29b      	uxth	r3, r3
 8007350:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	7b1b      	ldrb	r3, [r3, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f040 809d 	bne.w	80074ae <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d04c      	beq.n	8007416 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	823b      	strh	r3, [r7, #16]
 800738a:	8a3b      	ldrh	r3, [r7, #16]
 800738c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01b      	beq.n	80073cc <USB_EPClearStall+0x6c>
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073aa:	81fb      	strh	r3, [r7, #14]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	441a      	add	r2, r3
 80073b6:	89fb      	ldrh	r3, [r7, #14]
 80073b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	78db      	ldrb	r3, [r3, #3]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d06c      	beq.n	80074ae <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ea:	81bb      	strh	r3, [r7, #12]
 80073ec:	89bb      	ldrh	r3, [r7, #12]
 80073ee:	f083 0320 	eor.w	r3, r3, #32
 80073f2:	81bb      	strh	r3, [r7, #12]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	441a      	add	r2, r3
 80073fe:	89bb      	ldrh	r3, [r7, #12]
 8007400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007410:	b29b      	uxth	r3, r3
 8007412:	8013      	strh	r3, [r2, #0]
 8007414:	e04b      	b.n	80074ae <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	82fb      	strh	r3, [r7, #22]
 8007424:	8afb      	ldrh	r3, [r7, #22]
 8007426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d01b      	beq.n	8007466 <USB_EPClearStall+0x106>
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007444:	82bb      	strh	r3, [r7, #20]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	441a      	add	r2, r3
 8007450:	8abb      	ldrh	r3, [r7, #20]
 8007452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800745a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800745e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007462:	b29b      	uxth	r3, r3
 8007464:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747c:	827b      	strh	r3, [r7, #18]
 800747e:	8a7b      	ldrh	r3, [r7, #18]
 8007480:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007484:	827b      	strh	r3, [r7, #18]
 8007486:	8a7b      	ldrh	r3, [r7, #18]
 8007488:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800748c:	827b      	strh	r3, [r7, #18]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	441a      	add	r2, r3
 8007498:	8a7b      	ldrh	r3, [r7, #18]
 800749a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800749e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d103      	bne.n	80074d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2280      	movs	r2, #128	; 0x80
 80074d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007520:	b29b      	uxth	r3, r3
 8007522:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007524:	68fb      	ldr	r3, [r7, #12]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007532:	b480      	push	{r7}
 8007534:	b08d      	sub	sp, #52	; 0x34
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	4611      	mov	r1, r2
 800753e:	461a      	mov	r2, r3
 8007540:	460b      	mov	r3, r1
 8007542:	80fb      	strh	r3, [r7, #6]
 8007544:	4613      	mov	r3, r2
 8007546:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007548:	88bb      	ldrh	r3, [r7, #4]
 800754a:	3301      	adds	r3, #1
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007558:	88fa      	ldrh	r2, [r7, #6]
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007568:	e01b      	b.n	80075a2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	3301      	adds	r3, #1
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	b29b      	uxth	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	4313      	orrs	r3, r2
 8007586:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	b29a      	uxth	r2, r3
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	3302      	adds	r3, #2
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	3301      	adds	r3, #1
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	3b01      	subs	r3, #1
 80075a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e0      	bne.n	800756a <USB_WritePMA+0x38>
  }
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3734      	adds	r7, #52	; 0x34
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b08b      	sub	sp, #44	; 0x2c
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	4611      	mov	r1, r2
 80075c2:	461a      	mov	r2, r3
 80075c4:	460b      	mov	r3, r1
 80075c6:	80fb      	strh	r3, [r7, #6]
 80075c8:	4613      	mov	r3, r2
 80075ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075cc:	88bb      	ldrh	r3, [r7, #4]
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075e6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
 80075ec:	e018      	b.n	8007620 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	3302      	adds	r3, #2
 80075fa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	3301      	adds	r3, #1
 8007608:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	0a1b      	lsrs	r3, r3, #8
 800760e:	b2da      	uxtb	r2, r3
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3301      	adds	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	3b01      	subs	r3, #1
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e3      	bne.n	80075ee <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007626:	88bb      	ldrh	r3, [r7, #4]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	b2da      	uxtb	r2, r3
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	701a      	strb	r2, [r3, #0]
  }
}
 8007642:	bf00      	nop
 8007644:	372c      	adds	r7, #44	; 0x2c
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800765a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800765e:	f002 f901 	bl	8009864 <USBD_static_malloc>
 8007662:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d105      	bne.n	8007676 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007672:	2302      	movs	r3, #2
 8007674:	e066      	b.n	8007744 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	7c1b      	ldrb	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d119      	bne.n	80076ba <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800768a:	2202      	movs	r2, #2
 800768c:	2181      	movs	r1, #129	; 0x81
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 ff8d 	bl	80095ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800769a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800769e:	2202      	movs	r2, #2
 80076a0:	2101      	movs	r1, #1
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 ff83 	bl	80095ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2210      	movs	r2, #16
 80076b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80076b8:	e016      	b.n	80076e8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80076ba:	2340      	movs	r3, #64	; 0x40
 80076bc:	2202      	movs	r2, #2
 80076be:	2181      	movs	r1, #129	; 0x81
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 ff74 	bl	80095ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076cc:	2340      	movs	r3, #64	; 0x40
 80076ce:	2202      	movs	r2, #2
 80076d0:	2101      	movs	r1, #1
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 ff6b 	bl	80095ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2210      	movs	r2, #16
 80076e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076e8:	2308      	movs	r3, #8
 80076ea:	2203      	movs	r2, #3
 80076ec:	2182      	movs	r1, #130	; 0x82
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f001 ff5d 	bl	80095ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7c1b      	ldrb	r3, [r3, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d109      	bne.n	8007732 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007728:	2101      	movs	r1, #1
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f002 f82f 	bl	800978e <USBD_LL_PrepareReceive>
 8007730:	e007      	b.n	8007742 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007738:	2340      	movs	r3, #64	; 0x40
 800773a:	2101      	movs	r1, #1
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f002 f826 	bl	800978e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007758:	2181      	movs	r1, #129	; 0x81
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 ff4d 	bl	80095fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007766:	2101      	movs	r1, #1
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 ff46 	bl	80095fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007776:	2182      	movs	r1, #130	; 0x82
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 ff3e 	bl	80095fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00e      	beq.n	80077b6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a8:	4618      	mov	r0, r3
 80077aa:	f002 f869 	bl	8009880 <USBD_static_free>
    pdev->pClassData = NULL;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e0af      	b.n	8007948 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d03f      	beq.n	8007874 <USBD_CDC_Setup+0xb4>
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	f040 809f 	bne.w	8007938 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	88db      	ldrh	r3, [r3, #6]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d02e      	beq.n	8007860 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	b25b      	sxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	da16      	bge.n	800783a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007818:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	88d2      	ldrh	r2, [r2, #6]
 800781e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	88db      	ldrh	r3, [r3, #6]
 8007824:	2b07      	cmp	r3, #7
 8007826:	bf28      	it	cs
 8007828:	2307      	movcs	r3, #7
 800782a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	89fa      	ldrh	r2, [r7, #14]
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 facf 	bl	8008dd6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007838:	e085      	b.n	8007946 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	785a      	ldrb	r2, [r3, #1]
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	88db      	ldrh	r3, [r3, #6]
 8007848:	b2da      	uxtb	r2, r3
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007850:	6939      	ldr	r1, [r7, #16]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	88db      	ldrh	r3, [r3, #6]
 8007856:	461a      	mov	r2, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fae8 	bl	8008e2e <USBD_CtlPrepareRx>
      break;
 800785e:	e072      	b.n	8007946 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	7850      	ldrb	r0, [r2, #1]
 800786c:	2200      	movs	r2, #0
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	4798      	blx	r3
      break;
 8007872:	e068      	b.n	8007946 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	785b      	ldrb	r3, [r3, #1]
 8007878:	2b0b      	cmp	r3, #11
 800787a:	d852      	bhi.n	8007922 <USBD_CDC_Setup+0x162>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <USBD_CDC_Setup+0xc4>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	080078b5 	.word	0x080078b5
 8007888:	08007931 	.word	0x08007931
 800788c:	08007923 	.word	0x08007923
 8007890:	08007923 	.word	0x08007923
 8007894:	08007923 	.word	0x08007923
 8007898:	08007923 	.word	0x08007923
 800789c:	08007923 	.word	0x08007923
 80078a0:	08007923 	.word	0x08007923
 80078a4:	08007923 	.word	0x08007923
 80078a8:	08007923 	.word	0x08007923
 80078ac:	080078df 	.word	0x080078df
 80078b0:	08007909 	.word	0x08007909
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d107      	bne.n	80078d0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078c0:	f107 030a 	add.w	r3, r7, #10
 80078c4:	2202      	movs	r2, #2
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fa84 	bl	8008dd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078ce:	e032      	b.n	8007936 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fa0e 	bl	8008cf4 <USBD_CtlError>
            ret = USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	75fb      	strb	r3, [r7, #23]
          break;
 80078dc:	e02b      	b.n	8007936 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d107      	bne.n	80078fa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078ea:	f107 030d 	add.w	r3, r7, #13
 80078ee:	2201      	movs	r2, #1
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 fa6f 	bl	8008dd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078f8:	e01d      	b.n	8007936 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f9f9 	bl	8008cf4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	75fb      	strb	r3, [r7, #23]
          break;
 8007906:	e016      	b.n	8007936 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b03      	cmp	r3, #3
 8007912:	d00f      	beq.n	8007934 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 f9ec 	bl	8008cf4 <USBD_CtlError>
            ret = USBD_FAIL;
 800791c:	2303      	movs	r3, #3
 800791e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007920:	e008      	b.n	8007934 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 f9e5 	bl	8008cf4 <USBD_CtlError>
          ret = USBD_FAIL;
 800792a:	2303      	movs	r3, #3
 800792c:	75fb      	strb	r3, [r7, #23]
          break;
 800792e:	e002      	b.n	8007936 <USBD_CDC_Setup+0x176>
          break;
 8007930:	bf00      	nop
 8007932:	e008      	b.n	8007946 <USBD_CDC_Setup+0x186>
          break;
 8007934:	bf00      	nop
      }
      break;
 8007936:	e006      	b.n	8007946 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 f9da 	bl	8008cf4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007940:	2303      	movs	r3, #3
 8007942:	75fb      	strb	r3, [r7, #23]
      break;
 8007944:	bf00      	nop
  }

  return (uint8_t)ret;
 8007946:	7dfb      	ldrb	r3, [r7, #23]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007962:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800796e:	2303      	movs	r3, #3
 8007970:	e04f      	b.n	8007a12 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007978:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	440b      	add	r3, r1
 8007988:	3318      	adds	r3, #24
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d029      	beq.n	80079e4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007990:	78fa      	ldrb	r2, [r7, #3]
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	4613      	mov	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	3318      	adds	r3, #24
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	78f9      	ldrb	r1, [r7, #3]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	460b      	mov	r3, r1
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	440b      	add	r3, r1
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	4403      	add	r3, r0
 80079b0:	3338      	adds	r3, #56	; 0x38
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80079b8:	fb03 f301 	mul.w	r3, r3, r1
 80079bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d110      	bne.n	80079e4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80079c2:	78fa      	ldrb	r2, [r7, #3]
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	3318      	adds	r3, #24
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80079d6:	78f9      	ldrb	r1, [r7, #3]
 80079d8:	2300      	movs	r3, #0
 80079da:	2200      	movs	r2, #0
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 feb5 	bl	800974c <USBD_LL_Transmit>
 80079e2:	e015      	b.n	8007a10 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e015      	b.n	8007a68 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fec5 	bl	80097d0 <USBD_LL_GetRxDataSize>
 8007a46:	4602      	mov	r2, r0
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a62:	4611      	mov	r1, r2
 8007a64:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e01b      	b.n	8007ac2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d015      	beq.n	8007ac0 <USBD_CDC_EP0_RxReady+0x50>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a9a:	2bff      	cmp	r3, #255	; 0xff
 8007a9c:	d010      	beq.n	8007ac0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007aac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ab4:	b292      	uxth	r2, r2
 8007ab6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	22ff      	movs	r2, #255	; 0xff
 8007abc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2243      	movs	r2, #67	; 0x43
 8007ad8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007ada:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	200000ac 	.word	0x200000ac

08007aec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2243      	movs	r2, #67	; 0x43
 8007af8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007afa:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	20000068 	.word	0x20000068

08007b0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2243      	movs	r2, #67	; 0x43
 8007b18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007b1a:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	200000f0 	.word	0x200000f0

08007b2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	220a      	movs	r2, #10
 8007b38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b3a:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	20000024 	.word	0x20000024

08007b4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e004      	b.n	8007b6a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b087      	sub	sp, #28
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b88:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e008      	b.n	8007ba6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e004      	b.n	8007bd8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bf2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e01a      	b.n	8007c3c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d114      	bne.n	8007c3a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c2e:	2181      	movs	r1, #129	; 0x81
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 fd8b 	bl	800974c <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e016      	b.n	8007c90 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7c1b      	ldrb	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c74:	2101      	movs	r1, #1
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 fd89 	bl	800978e <USBD_LL_PrepareReceive>
 8007c7c:	e007      	b.n	8007c8e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c84:	2340      	movs	r3, #64	; 0x40
 8007c86:	2101      	movs	r1, #1
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 fd80 	bl	800978e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e01f      	b.n	8007cf0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	79fa      	ldrb	r2, [r7, #7]
 8007ce2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f001 fbe7 	bl	80094b8 <USBD_LL_Init>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e016      	b.n	8007d3e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00b      	beq.n	8007d3c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	f107 020e 	add.w	r2, r7, #14
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	4602      	mov	r2, r0
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 fc12 	bl	8009578 <USBD_LL_Start>
 8007d54:	4603      	mov	r3, r0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d80:	2303      	movs	r3, #3
 8007d82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	78fa      	ldrb	r2, [r7, #3]
 8007d98:	4611      	mov	r1, r2
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	4798      	blx	r3
 8007d9e:	4603      	mov	r3, r0
 8007da0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	78fa      	ldrb	r2, [r7, #3]
 8007dcc:	4611      	mov	r1, r2
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
  }

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 ff46 	bl	8008c80 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e10:	f003 031f 	and.w	r3, r3, #31
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d01a      	beq.n	8007e4e <USBD_LL_SetupStage+0x72>
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d822      	bhi.n	8007e62 <USBD_LL_SetupStage+0x86>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <USBD_LL_SetupStage+0x4a>
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d00a      	beq.n	8007e3a <USBD_LL_SetupStage+0x5e>
 8007e24:	e01d      	b.n	8007e62 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f9ee 	bl	8008210 <USBD_StdDevReq>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]
      break;
 8007e38:	e020      	b.n	8007e7c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa52 	bl	80082ec <USBD_StdItfReq>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e4c:	e016      	b.n	8007e7c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa91 	bl	800837e <USBD_StdEPReq>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e60:	e00c      	b.n	8007e7c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 fbe1 	bl	8009638 <USBD_LL_StallEP>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7a:	bf00      	nop
  }

  return ret;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d138      	bne.n	8007f0c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ea0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d14a      	bne.n	8007f42 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d913      	bls.n	8007ee0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	1ad2      	subs	r2, r2, r3
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	bf28      	it	cs
 8007ed2:	4613      	movcs	r3, r2
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 ffc5 	bl	8008e68 <USBD_CtlContinueRx>
 8007ede:	e030      	b.n	8007f42 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d10b      	bne.n	8007f04 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 ffc0 	bl	8008e8a <USBD_CtlSendStatus>
 8007f0a:	e01a      	b.n	8007f42 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d114      	bne.n	8007f42 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00e      	beq.n	8007f42 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	7afa      	ldrb	r2, [r7, #11]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	4798      	blx	r3
 8007f34:	4603      	mov	r3, r0
 8007f36:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	e000      	b.n	8007f44 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	460b      	mov	r3, r1
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d16b      	bne.n	8008038 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3314      	adds	r3, #20
 8007f64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d156      	bne.n	800801e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d914      	bls.n	8007fa6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	1ad2      	subs	r2, r2, r3
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 ff3a 	bl	8008e0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f001 fbf5 	bl	800978e <USBD_LL_PrepareReceive>
 8007fa4:	e03b      	b.n	800801e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d11c      	bne.n	8007fec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d316      	bcc.n	8007fec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d20f      	bcs.n	8007fec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2100      	movs	r1, #0
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 ff1b 	bl	8008e0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f001 fbd2 	bl	800978e <USBD_LL_PrepareReceive>
 8007fea:	e018      	b.n	800801e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d10b      	bne.n	8008010 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008010:	2180      	movs	r1, #128	; 0x80
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f001 fb10 	bl	8009638 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 ff49 	bl	8008eb0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008024:	2b01      	cmp	r3, #1
 8008026:	d122      	bne.n	800806e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f7ff fe98 	bl	8007d5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008036:	e01a      	b.n	800806e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b03      	cmp	r3, #3
 8008042:	d114      	bne.n	800806e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	7afa      	ldrb	r2, [r7, #11]
 800805a:	4611      	mov	r1, r2
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	4798      	blx	r3
 8008060:	4603      	mov	r3, r0
 8008062:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	e000      	b.n	8008070 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e02f      	b.n	800810c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00f      	beq.n	80080d6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d009      	beq.n	80080d6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6852      	ldr	r2, [r2, #4]
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	4611      	mov	r1, r2
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080d6:	2340      	movs	r3, #64	; 0x40
 80080d8:	2200      	movs	r2, #0
 80080da:	2100      	movs	r1, #0
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 fa66 	bl	80095ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2240      	movs	r2, #64	; 0x40
 80080ee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080f2:	2340      	movs	r3, #64	; 0x40
 80080f4:	2200      	movs	r2, #0
 80080f6:	2180      	movs	r1, #128	; 0x80
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 fa58 	bl	80095ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2240      	movs	r2, #64	; 0x40
 8008108:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	78fa      	ldrb	r2, [r7, #3]
 8008124:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008142:	b2da      	uxtb	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2204      	movs	r2, #4
 800814e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b04      	cmp	r3, #4
 8008172:	d106      	bne.n	8008182 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800817a:	b2da      	uxtb	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e012      	b.n	80081cc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d10b      	bne.n	80081ca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d005      	beq.n	80081ca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	3301      	adds	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80081f2:	8a3b      	ldrh	r3, [r7, #16]
 80081f4:	021b      	lsls	r3, r3, #8
 80081f6:	b21a      	sxth	r2, r3
 80081f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	b21b      	sxth	r3, r3
 8008200:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008202:	89fb      	ldrh	r3, [r7, #14]
}
 8008204:	4618      	mov	r0, r3
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008226:	2b40      	cmp	r3, #64	; 0x40
 8008228:	d005      	beq.n	8008236 <USBD_StdDevReq+0x26>
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d853      	bhi.n	80082d6 <USBD_StdDevReq+0xc6>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <USBD_StdDevReq+0x3a>
 8008232:	2b20      	cmp	r3, #32
 8008234:	d14f      	bne.n	80082d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
      break;
 8008248:	e04a      	b.n	80082e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	2b09      	cmp	r3, #9
 8008250:	d83b      	bhi.n	80082ca <USBD_StdDevReq+0xba>
 8008252:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBD_StdDevReq+0x48>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	080082ad 	.word	0x080082ad
 800825c:	080082c1 	.word	0x080082c1
 8008260:	080082cb 	.word	0x080082cb
 8008264:	080082b7 	.word	0x080082b7
 8008268:	080082cb 	.word	0x080082cb
 800826c:	0800828b 	.word	0x0800828b
 8008270:	08008281 	.word	0x08008281
 8008274:	080082cb 	.word	0x080082cb
 8008278:	080082a3 	.word	0x080082a3
 800827c:	08008295 	.word	0x08008295
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f9de 	bl	8008644 <USBD_GetDescriptor>
          break;
 8008288:	e024      	b.n	80082d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fb6d 	bl	800896c <USBD_SetAddress>
          break;
 8008292:	e01f      	b.n	80082d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fbac 	bl	80089f4 <USBD_SetConfig>
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
          break;
 80082a0:	e018      	b.n	80082d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fc4b 	bl	8008b40 <USBD_GetConfig>
          break;
 80082aa:	e013      	b.n	80082d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fc7c 	bl	8008bac <USBD_GetStatus>
          break;
 80082b4:	e00e      	b.n	80082d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fcab 	bl	8008c14 <USBD_SetFeature>
          break;
 80082be:	e009      	b.n	80082d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fcba 	bl	8008c3c <USBD_ClrFeature>
          break;
 80082c8:	e004      	b.n	80082d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fd11 	bl	8008cf4 <USBD_CtlError>
          break;
 80082d2:	bf00      	nop
      }
      break;
 80082d4:	e004      	b.n	80082e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fd0b 	bl	8008cf4 <USBD_CtlError>
      break;
 80082de:	bf00      	nop
  }

  return ret;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop

080082ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d005      	beq.n	8008312 <USBD_StdItfReq+0x26>
 8008306:	2b40      	cmp	r3, #64	; 0x40
 8008308:	d82f      	bhi.n	800836a <USBD_StdItfReq+0x7e>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <USBD_StdItfReq+0x26>
 800830e:	2b20      	cmp	r3, #32
 8008310:	d12b      	bne.n	800836a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008318:	b2db      	uxtb	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	2b02      	cmp	r3, #2
 800831e:	d81d      	bhi.n	800835c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	889b      	ldrh	r3, [r3, #4]
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b01      	cmp	r3, #1
 8008328:	d813      	bhi.n	8008352 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4798      	blx	r3
 8008338:	4603      	mov	r3, r0
 800833a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	88db      	ldrh	r3, [r3, #6]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d110      	bne.n	8008366 <USBD_StdItfReq+0x7a>
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10d      	bne.n	8008366 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fd9d 	bl	8008e8a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008350:	e009      	b.n	8008366 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fccd 	bl	8008cf4 <USBD_CtlError>
          break;
 800835a:	e004      	b.n	8008366 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fcc8 	bl	8008cf4 <USBD_CtlError>
          break;
 8008364:	e000      	b.n	8008368 <USBD_StdItfReq+0x7c>
          break;
 8008366:	bf00      	nop
      }
      break;
 8008368:	e004      	b.n	8008374 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fcc1 	bl	8008cf4 <USBD_CtlError>
      break;
 8008372:	bf00      	nop
  }

  return ret;
 8008374:	7bfb      	ldrb	r3, [r7, #15]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	889b      	ldrh	r3, [r3, #4]
 8008390:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800839a:	2b40      	cmp	r3, #64	; 0x40
 800839c:	d007      	beq.n	80083ae <USBD_StdEPReq+0x30>
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	f200 8145 	bhi.w	800862e <USBD_StdEPReq+0x2b0>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00c      	beq.n	80083c2 <USBD_StdEPReq+0x44>
 80083a8:	2b20      	cmp	r3, #32
 80083aa:	f040 8140 	bne.w	800862e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	4798      	blx	r3
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
      break;
 80083c0:	e13a      	b.n	8008638 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d007      	beq.n	80083da <USBD_StdEPReq+0x5c>
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	f300 8129 	bgt.w	8008622 <USBD_StdEPReq+0x2a4>
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d07f      	beq.n	80084d4 <USBD_StdEPReq+0x156>
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d03c      	beq.n	8008452 <USBD_StdEPReq+0xd4>
 80083d8:	e123      	b.n	8008622 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d002      	beq.n	80083ec <USBD_StdEPReq+0x6e>
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d016      	beq.n	8008418 <USBD_StdEPReq+0x9a>
 80083ea:	e02c      	b.n	8008446 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00d      	beq.n	800840e <USBD_StdEPReq+0x90>
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b80      	cmp	r3, #128	; 0x80
 80083f6:	d00a      	beq.n	800840e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 f91b 	bl	8009638 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008402:	2180      	movs	r1, #128	; 0x80
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f917 	bl	8009638 <USBD_LL_StallEP>
 800840a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800840c:	e020      	b.n	8008450 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fc6f 	bl	8008cf4 <USBD_CtlError>
              break;
 8008416:	e01b      	b.n	8008450 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	885b      	ldrh	r3, [r3, #2]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10e      	bne.n	800843e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <USBD_StdEPReq+0xc0>
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b80      	cmp	r3, #128	; 0x80
 800842a:	d008      	beq.n	800843e <USBD_StdEPReq+0xc0>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	88db      	ldrh	r3, [r3, #6]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 f8fd 	bl	8009638 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fd23 	bl	8008e8a <USBD_CtlSendStatus>

              break;
 8008444:	e004      	b.n	8008450 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fc53 	bl	8008cf4 <USBD_CtlError>
              break;
 800844e:	bf00      	nop
          }
          break;
 8008450:	e0ec      	b.n	800862c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d002      	beq.n	8008464 <USBD_StdEPReq+0xe6>
 800845e:	2b03      	cmp	r3, #3
 8008460:	d016      	beq.n	8008490 <USBD_StdEPReq+0x112>
 8008462:	e030      	b.n	80084c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00d      	beq.n	8008486 <USBD_StdEPReq+0x108>
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	2b80      	cmp	r3, #128	; 0x80
 800846e:	d00a      	beq.n	8008486 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 f8df 	bl	8009638 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800847a:	2180      	movs	r1, #128	; 0x80
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 f8db 	bl	8009638 <USBD_LL_StallEP>
 8008482:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008484:	e025      	b.n	80084d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fc33 	bl	8008cf4 <USBD_CtlError>
              break;
 800848e:	e020      	b.n	80084d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	885b      	ldrh	r3, [r3, #2]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d11b      	bne.n	80084d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 f8e5 	bl	8009676 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fcec 	bl	8008e8a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	4798      	blx	r3
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80084c4:	e004      	b.n	80084d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fc13 	bl	8008cf4 <USBD_CtlError>
              break;
 80084ce:	e000      	b.n	80084d2 <USBD_StdEPReq+0x154>
              break;
 80084d0:	bf00      	nop
          }
          break;
 80084d2:	e0ab      	b.n	800862c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d002      	beq.n	80084e6 <USBD_StdEPReq+0x168>
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d032      	beq.n	800854a <USBD_StdEPReq+0x1cc>
 80084e4:	e097      	b.n	8008616 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d007      	beq.n	80084fc <USBD_StdEPReq+0x17e>
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b80      	cmp	r3, #128	; 0x80
 80084f0:	d004      	beq.n	80084fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fbfd 	bl	8008cf4 <USBD_CtlError>
                break;
 80084fa:	e091      	b.n	8008620 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008500:	2b00      	cmp	r3, #0
 8008502:	da0b      	bge.n	800851c <USBD_StdEPReq+0x19e>
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800850a:	4613      	mov	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	3310      	adds	r3, #16
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	4413      	add	r3, r2
 8008518:	3304      	adds	r3, #4
 800851a:	e00b      	b.n	8008534 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008522:	4613      	mov	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4413      	add	r3, r2
 8008532:	3304      	adds	r3, #4
 8008534:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2202      	movs	r2, #2
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fc47 	bl	8008dd6 <USBD_CtlSendData>
              break;
 8008548:	e06a      	b.n	8008620 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800854a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800854e:	2b00      	cmp	r3, #0
 8008550:	da11      	bge.n	8008576 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	3324      	adds	r3, #36	; 0x24
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d117      	bne.n	800859c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fbc0 	bl	8008cf4 <USBD_CtlError>
                  break;
 8008574:	e054      	b.n	8008620 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	f003 020f 	and.w	r2, r3, #15
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4613      	mov	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	440b      	add	r3, r1
 8008588:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fbad 	bl	8008cf4 <USBD_CtlError>
                  break;
 800859a:	e041      	b.n	8008620 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800859c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da0b      	bge.n	80085bc <USBD_StdEPReq+0x23e>
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085aa:	4613      	mov	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	3310      	adds	r3, #16
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	4413      	add	r3, r2
 80085b8:	3304      	adds	r3, #4
 80085ba:	e00b      	b.n	80085d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	4413      	add	r3, r2
 80085d2:	3304      	adds	r3, #4
 80085d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <USBD_StdEPReq+0x264>
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b80      	cmp	r3, #128	; 0x80
 80085e0:	d103      	bne.n	80085ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	e00e      	b.n	8008608 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 f860 	bl	80096b4 <USBD_LL_IsStallEP>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2201      	movs	r2, #1
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	e002      	b.n	8008608 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2202      	movs	r2, #2
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fbe1 	bl	8008dd6 <USBD_CtlSendData>
              break;
 8008614:	e004      	b.n	8008620 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fb6b 	bl	8008cf4 <USBD_CtlError>
              break;
 800861e:	bf00      	nop
          }
          break;
 8008620:	e004      	b.n	800862c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb65 	bl	8008cf4 <USBD_CtlError>
          break;
 800862a:	bf00      	nop
      }
      break;
 800862c:	e004      	b.n	8008638 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fb5f 	bl	8008cf4 <USBD_CtlError>
      break;
 8008636:	bf00      	nop
  }

  return ret;
 8008638:	7bfb      	ldrb	r3, [r7, #15]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	885b      	ldrh	r3, [r3, #2]
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	b29b      	uxth	r3, r3
 8008662:	3b01      	subs	r3, #1
 8008664:	2b0e      	cmp	r3, #14
 8008666:	f200 8152 	bhi.w	800890e <USBD_GetDescriptor+0x2ca>
 800866a:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <USBD_GetDescriptor+0x2c>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	080086e1 	.word	0x080086e1
 8008674:	080086f9 	.word	0x080086f9
 8008678:	08008739 	.word	0x08008739
 800867c:	0800890f 	.word	0x0800890f
 8008680:	0800890f 	.word	0x0800890f
 8008684:	080088af 	.word	0x080088af
 8008688:	080088db 	.word	0x080088db
 800868c:	0800890f 	.word	0x0800890f
 8008690:	0800890f 	.word	0x0800890f
 8008694:	0800890f 	.word	0x0800890f
 8008698:	0800890f 	.word	0x0800890f
 800869c:	0800890f 	.word	0x0800890f
 80086a0:	0800890f 	.word	0x0800890f
 80086a4:	0800890f 	.word	0x0800890f
 80086a8:	080086ad 	.word	0x080086ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00b      	beq.n	80086d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	7c12      	ldrb	r2, [r2, #16]
 80086c4:	f107 0108 	add.w	r1, r7, #8
 80086c8:	4610      	mov	r0, r2
 80086ca:	4798      	blx	r3
 80086cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086ce:	e126      	b.n	800891e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fb0e 	bl	8008cf4 <USBD_CtlError>
        err++;
 80086d8:	7afb      	ldrb	r3, [r7, #11]
 80086da:	3301      	adds	r3, #1
 80086dc:	72fb      	strb	r3, [r7, #11]
      break;
 80086de:	e11e      	b.n	800891e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7c12      	ldrb	r2, [r2, #16]
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	60f8      	str	r0, [r7, #12]
      break;
 80086f6:	e112      	b.n	800891e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	7c1b      	ldrb	r3, [r3, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10d      	bne.n	800871c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	f107 0208 	add.w	r2, r7, #8
 800870c:	4610      	mov	r0, r2
 800870e:	4798      	blx	r3
 8008710:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	2202      	movs	r2, #2
 8008718:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800871a:	e100      	b.n	800891e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	f107 0208 	add.w	r2, r7, #8
 8008728:	4610      	mov	r0, r2
 800872a:	4798      	blx	r3
 800872c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3301      	adds	r3, #1
 8008732:	2202      	movs	r2, #2
 8008734:	701a      	strb	r2, [r3, #0]
      break;
 8008736:	e0f2      	b.n	800891e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	885b      	ldrh	r3, [r3, #2]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b05      	cmp	r3, #5
 8008740:	f200 80ac 	bhi.w	800889c <USBD_GetDescriptor+0x258>
 8008744:	a201      	add	r2, pc, #4	; (adr r2, 800874c <USBD_GetDescriptor+0x108>)
 8008746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874a:	bf00      	nop
 800874c:	08008765 	.word	0x08008765
 8008750:	08008799 	.word	0x08008799
 8008754:	080087cd 	.word	0x080087cd
 8008758:	08008801 	.word	0x08008801
 800875c:	08008835 	.word	0x08008835
 8008760:	08008869 	.word	0x08008869
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00b      	beq.n	8008788 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	7c12      	ldrb	r2, [r2, #16]
 800877c:	f107 0108 	add.w	r1, r7, #8
 8008780:	4610      	mov	r0, r2
 8008782:	4798      	blx	r3
 8008784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008786:	e091      	b.n	80088ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fab2 	bl	8008cf4 <USBD_CtlError>
            err++;
 8008790:	7afb      	ldrb	r3, [r7, #11]
 8008792:	3301      	adds	r3, #1
 8008794:	72fb      	strb	r3, [r7, #11]
          break;
 8008796:	e089      	b.n	80088ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	7c12      	ldrb	r2, [r2, #16]
 80087b0:	f107 0108 	add.w	r1, r7, #8
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ba:	e077      	b.n	80088ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa98 	bl	8008cf4 <USBD_CtlError>
            err++;
 80087c4:	7afb      	ldrb	r3, [r7, #11]
 80087c6:	3301      	adds	r3, #1
 80087c8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ca:	e06f      	b.n	80088ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00b      	beq.n	80087f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	7c12      	ldrb	r2, [r2, #16]
 80087e4:	f107 0108 	add.w	r1, r7, #8
 80087e8:	4610      	mov	r0, r2
 80087ea:	4798      	blx	r3
 80087ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ee:	e05d      	b.n	80088ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fa7e 	bl	8008cf4 <USBD_CtlError>
            err++;
 80087f8:	7afb      	ldrb	r3, [r7, #11]
 80087fa:	3301      	adds	r3, #1
 80087fc:	72fb      	strb	r3, [r7, #11]
          break;
 80087fe:	e055      	b.n	80088ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00b      	beq.n	8008824 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	7c12      	ldrb	r2, [r2, #16]
 8008818:	f107 0108 	add.w	r1, r7, #8
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
 8008820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008822:	e043      	b.n	80088ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa64 	bl	8008cf4 <USBD_CtlError>
            err++;
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	3301      	adds	r3, #1
 8008830:	72fb      	strb	r3, [r7, #11]
          break;
 8008832:	e03b      	b.n	80088ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	7c12      	ldrb	r2, [r2, #16]
 800884c:	f107 0108 	add.w	r1, r7, #8
 8008850:	4610      	mov	r0, r2
 8008852:	4798      	blx	r3
 8008854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008856:	e029      	b.n	80088ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa4a 	bl	8008cf4 <USBD_CtlError>
            err++;
 8008860:	7afb      	ldrb	r3, [r7, #11]
 8008862:	3301      	adds	r3, #1
 8008864:	72fb      	strb	r3, [r7, #11]
          break;
 8008866:	e021      	b.n	80088ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	7c12      	ldrb	r2, [r2, #16]
 8008880:	f107 0108 	add.w	r1, r7, #8
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
 8008888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800888a:	e00f      	b.n	80088ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa30 	bl	8008cf4 <USBD_CtlError>
            err++;
 8008894:	7afb      	ldrb	r3, [r7, #11]
 8008896:	3301      	adds	r3, #1
 8008898:	72fb      	strb	r3, [r7, #11]
          break;
 800889a:	e007      	b.n	80088ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fa28 	bl	8008cf4 <USBD_CtlError>
          err++;
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	3301      	adds	r3, #1
 80088a8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80088aa:	bf00      	nop
      }
      break;
 80088ac:	e037      	b.n	800891e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	7c1b      	ldrb	r3, [r3, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d109      	bne.n	80088ca <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088be:	f107 0208 	add.w	r2, r7, #8
 80088c2:	4610      	mov	r0, r2
 80088c4:	4798      	blx	r3
 80088c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088c8:	e029      	b.n	800891e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fa11 	bl	8008cf4 <USBD_CtlError>
        err++;
 80088d2:	7afb      	ldrb	r3, [r7, #11]
 80088d4:	3301      	adds	r3, #1
 80088d6:	72fb      	strb	r3, [r7, #11]
      break;
 80088d8:	e021      	b.n	800891e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	7c1b      	ldrb	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10d      	bne.n	80088fe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	f107 0208 	add.w	r2, r7, #8
 80088ee:	4610      	mov	r0, r2
 80088f0:	4798      	blx	r3
 80088f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3301      	adds	r3, #1
 80088f8:	2207      	movs	r2, #7
 80088fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088fc:	e00f      	b.n	800891e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f9f7 	bl	8008cf4 <USBD_CtlError>
        err++;
 8008906:	7afb      	ldrb	r3, [r7, #11]
 8008908:	3301      	adds	r3, #1
 800890a:	72fb      	strb	r3, [r7, #11]
      break;
 800890c:	e007      	b.n	800891e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f9ef 	bl	8008cf4 <USBD_CtlError>
      err++;
 8008916:	7afb      	ldrb	r3, [r7, #11]
 8008918:	3301      	adds	r3, #1
 800891a:	72fb      	strb	r3, [r7, #11]
      break;
 800891c:	bf00      	nop
  }

  if (err != 0U)
 800891e:	7afb      	ldrb	r3, [r7, #11]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d11e      	bne.n	8008962 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	88db      	ldrh	r3, [r3, #6]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d016      	beq.n	800895a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800892c:	893b      	ldrh	r3, [r7, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00e      	beq.n	8008950 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	88da      	ldrh	r2, [r3, #6]
 8008936:	893b      	ldrh	r3, [r7, #8]
 8008938:	4293      	cmp	r3, r2
 800893a:	bf28      	it	cs
 800893c:	4613      	movcs	r3, r2
 800893e:	b29b      	uxth	r3, r3
 8008940:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008942:	893b      	ldrh	r3, [r7, #8]
 8008944:	461a      	mov	r2, r3
 8008946:	68f9      	ldr	r1, [r7, #12]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fa44 	bl	8008dd6 <USBD_CtlSendData>
 800894e:	e009      	b.n	8008964 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f9ce 	bl	8008cf4 <USBD_CtlError>
 8008958:	e004      	b.n	8008964 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fa95 	bl	8008e8a <USBD_CtlSendStatus>
 8008960:	e000      	b.n	8008964 <USBD_GetDescriptor+0x320>
    return;
 8008962:	bf00      	nop
  }
}
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop

0800896c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	889b      	ldrh	r3, [r3, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d131      	bne.n	80089e2 <USBD_SetAddress+0x76>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	88db      	ldrh	r3, [r3, #6]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d12d      	bne.n	80089e2 <USBD_SetAddress+0x76>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	885b      	ldrh	r3, [r3, #2]
 800898a:	2b7f      	cmp	r3, #127	; 0x7f
 800898c:	d829      	bhi.n	80089e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	885b      	ldrh	r3, [r3, #2]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008998:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d104      	bne.n	80089b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f9a3 	bl	8008cf4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ae:	e01d      	b.n	80089ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7bfa      	ldrb	r2, [r7, #15]
 80089b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fea6 	bl	800970e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa61 	bl	8008e8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d004      	beq.n	80089d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2202      	movs	r2, #2
 80089d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d6:	e009      	b.n	80089ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e0:	e004      	b.n	80089ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f985 	bl	8008cf4 <USBD_CtlError>
  }
}
 80089ea:	bf00      	nop
 80089ec:	bf00      	nop
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	885b      	ldrh	r3, [r3, #2]
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	4b4c      	ldr	r3, [pc, #304]	; (8008b3c <USBD_SetConfig+0x148>)
 8008a0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a0c:	4b4b      	ldr	r3, [pc, #300]	; (8008b3c <USBD_SetConfig+0x148>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d905      	bls.n	8008a20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f96c 	bl	8008cf4 <USBD_CtlError>
    return USBD_FAIL;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e088      	b.n	8008b32 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d002      	beq.n	8008a32 <USBD_SetConfig+0x3e>
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d025      	beq.n	8008a7c <USBD_SetConfig+0x88>
 8008a30:	e071      	b.n	8008b16 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a32:	4b42      	ldr	r3, [pc, #264]	; (8008b3c <USBD_SetConfig+0x148>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d01c      	beq.n	8008a74 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008a3a:	4b40      	ldr	r3, [pc, #256]	; (8008b3c <USBD_SetConfig+0x148>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a44:	4b3d      	ldr	r3, [pc, #244]	; (8008b3c <USBD_SetConfig+0x148>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff f992 	bl	8007d74 <USBD_SetClassConfig>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d004      	beq.n	8008a64 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f949 	bl	8008cf4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a62:	e065      	b.n	8008b30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fa10 	bl	8008e8a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2203      	movs	r2, #3
 8008a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a72:	e05d      	b.n	8008b30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fa08 	bl	8008e8a <USBD_CtlSendStatus>
      break;
 8008a7a:	e059      	b.n	8008b30 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a7c:	4b2f      	ldr	r3, [pc, #188]	; (8008b3c <USBD_SetConfig+0x148>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d112      	bne.n	8008aaa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a8c:	4b2b      	ldr	r3, [pc, #172]	; (8008b3c <USBD_SetConfig+0x148>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a96:	4b29      	ldr	r3, [pc, #164]	; (8008b3c <USBD_SetConfig+0x148>)
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff f985 	bl	8007dac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f9f1 	bl	8008e8a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008aa8:	e042      	b.n	8008b30 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008aaa:	4b24      	ldr	r3, [pc, #144]	; (8008b3c <USBD_SetConfig+0x148>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d02a      	beq.n	8008b0e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff f973 	bl	8007dac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ac6:	4b1d      	ldr	r3, [pc, #116]	; (8008b3c <USBD_SetConfig+0x148>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ad0:	4b1a      	ldr	r3, [pc, #104]	; (8008b3c <USBD_SetConfig+0x148>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff f94c 	bl	8007d74 <USBD_SetClassConfig>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00f      	beq.n	8008b06 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f903 	bl	8008cf4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff f958 	bl	8007dac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b04:	e014      	b.n	8008b30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f9bf 	bl	8008e8a <USBD_CtlSendStatus>
      break;
 8008b0c:	e010      	b.n	8008b30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f9bb 	bl	8008e8a <USBD_CtlSendStatus>
      break;
 8008b14:	e00c      	b.n	8008b30 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8eb 	bl	8008cf4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b1e:	4b07      	ldr	r3, [pc, #28]	; (8008b3c <USBD_SetConfig+0x148>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff f941 	bl	8007dac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b2e:	bf00      	nop
  }

  return ret;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200001c3 	.word	0x200001c3

08008b40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	88db      	ldrh	r3, [r3, #6]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d004      	beq.n	8008b5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f8cd 	bl	8008cf4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b5a:	e023      	b.n	8008ba4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	dc02      	bgt.n	8008b6e <USBD_GetConfig+0x2e>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dc03      	bgt.n	8008b74 <USBD_GetConfig+0x34>
 8008b6c:	e015      	b.n	8008b9a <USBD_GetConfig+0x5a>
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d00b      	beq.n	8008b8a <USBD_GetConfig+0x4a>
 8008b72:	e012      	b.n	8008b9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3308      	adds	r3, #8
 8008b7e:	2201      	movs	r2, #1
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f927 	bl	8008dd6 <USBD_CtlSendData>
        break;
 8008b88:	e00c      	b.n	8008ba4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	2201      	movs	r2, #1
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f91f 	bl	8008dd6 <USBD_CtlSendData>
        break;
 8008b98:	e004      	b.n	8008ba4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f8a9 	bl	8008cf4 <USBD_CtlError>
        break;
 8008ba2:	bf00      	nop
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d81e      	bhi.n	8008c02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	88db      	ldrh	r3, [r3, #6]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d004      	beq.n	8008bd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f890 	bl	8008cf4 <USBD_CtlError>
        break;
 8008bd4:	e01a      	b.n	8008c0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f043 0202 	orr.w	r2, r3, #2
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	330c      	adds	r3, #12
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8eb 	bl	8008dd6 <USBD_CtlSendData>
      break;
 8008c00:	e004      	b.n	8008c0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f875 	bl	8008cf4 <USBD_CtlError>
      break;
 8008c0a:	bf00      	nop
  }
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	885b      	ldrh	r3, [r3, #2]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d106      	bne.n	8008c34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f92b 	bl	8008e8a <USBD_CtlSendStatus>
  }
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d80b      	bhi.n	8008c6c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	885b      	ldrh	r3, [r3, #2]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d10c      	bne.n	8008c76 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f910 	bl	8008e8a <USBD_CtlSendStatus>
      }
      break;
 8008c6a:	e004      	b.n	8008c76 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f840 	bl	8008cf4 <USBD_CtlError>
      break;
 8008c74:	e000      	b.n	8008c78 <USBD_ClrFeature+0x3c>
      break;
 8008c76:	bf00      	nop
  }
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	781a      	ldrb	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	781a      	ldrb	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff fa92 	bl	80081d4 <SWAPBYTE>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7ff fa85 	bl	80081d4 <SWAPBYTE>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	461a      	mov	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f7ff fa78 	bl	80081d4 <SWAPBYTE>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	80da      	strh	r2, [r3, #6]
}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cfe:	2180      	movs	r1, #128	; 0x80
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fc99 	bl	8009638 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d06:	2100      	movs	r1, #0
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fc95 	bl	8009638 <USBD_LL_StallEP>
}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b086      	sub	sp, #24
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d036      	beq.n	8008d9a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d30:	6938      	ldr	r0, [r7, #16]
 8008d32:	f000 f836 	bl	8008da2 <USBD_GetLen>
 8008d36:	4603      	mov	r3, r0
 8008d38:	3301      	adds	r3, #1
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	4413      	add	r3, r2
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	7812      	ldrb	r2, [r2, #0]
 8008d4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	3301      	adds	r3, #1
 8008d54:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	3301      	adds	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d66:	e013      	b.n	8008d90 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	7812      	ldrb	r2, [r2, #0]
 8008d72:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	3301      	adds	r3, #1
 8008d78:	613b      	str	r3, [r7, #16]
    idx++;
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	4413      	add	r3, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e7      	bne.n	8008d68 <USBD_GetString+0x52>
 8008d98:	e000      	b.n	8008d9c <USBD_GetString+0x86>
    return;
 8008d9a:	bf00      	nop
  }
}
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b085      	sub	sp, #20
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008db2:	e005      	b.n	8008dc0 <USBD_GetLen+0x1e>
  {
    len++;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	3301      	adds	r3, #1
 8008db8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1f5      	bne.n	8008db4 <USBD_GetLen+0x12>
  }

  return len;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2202      	movs	r2, #2
 8008de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fca5 	bl	800974c <USBD_LL_Transmit>

  return USBD_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 fc94 	bl	800974c <USBD_LL_Transmit>

  return USBD_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	2100      	movs	r1, #0
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 fc98 	bl	800978e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	2100      	movs	r1, #0
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 fc87 	bl	800978e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2204      	movs	r2, #4
 8008e96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fc53 	bl	800974c <USBD_LL_Transmit>

  return USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2205      	movs	r2, #5
 8008ebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fc61 	bl	800978e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008edc:	2200      	movs	r2, #0
 8008ede:	4912      	ldr	r1, [pc, #72]	; (8008f28 <MX_USB_Device_Init+0x50>)
 8008ee0:	4812      	ldr	r0, [pc, #72]	; (8008f2c <MX_USB_Device_Init+0x54>)
 8008ee2:	f7fe fed9 	bl	8007c98 <USBD_Init>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008eec:	f7f7 fdb4 	bl	8000a58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008ef0:	490f      	ldr	r1, [pc, #60]	; (8008f30 <MX_USB_Device_Init+0x58>)
 8008ef2:	480e      	ldr	r0, [pc, #56]	; (8008f2c <MX_USB_Device_Init+0x54>)
 8008ef4:	f7fe ff00 	bl	8007cf8 <USBD_RegisterClass>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008efe:	f7f7 fdab 	bl	8000a58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008f02:	490c      	ldr	r1, [pc, #48]	; (8008f34 <MX_USB_Device_Init+0x5c>)
 8008f04:	4809      	ldr	r0, [pc, #36]	; (8008f2c <MX_USB_Device_Init+0x54>)
 8008f06:	f7fe fe21 	bl	8007b4c <USBD_CDC_RegisterInterface>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008f10:	f7f7 fda2 	bl	8000a58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008f14:	4805      	ldr	r0, [pc, #20]	; (8008f2c <MX_USB_Device_Init+0x54>)
 8008f16:	f7fe ff16 	bl	8007d46 <USBD_Start>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008f20:	f7f7 fd9a 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008f24:	bf00      	nop
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20000148 	.word	0x20000148
 8008f2c:	200005fc 	.word	0x200005fc
 8008f30:	20000030 	.word	0x20000030
 8008f34:	20000134 	.word	0x20000134

08008f38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4905      	ldr	r1, [pc, #20]	; (8008f54 <CDC_Init_FS+0x1c>)
 8008f40:	4805      	ldr	r0, [pc, #20]	; (8008f58 <CDC_Init_FS+0x20>)
 8008f42:	f7fe fe18 	bl	8007b76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f46:	4905      	ldr	r1, [pc, #20]	; (8008f5c <CDC_Init_FS+0x24>)
 8008f48:	4803      	ldr	r0, [pc, #12]	; (8008f58 <CDC_Init_FS+0x20>)
 8008f4a:	f7fe fe32 	bl	8007bb2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000cb4 	.word	0x20000cb4
 8008f58:	200005fc 	.word	0x200005fc
 8008f5c:	200008cc 	.word	0x200008cc

08008f60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	6039      	str	r1, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	2b23      	cmp	r3, #35	; 0x23
 8008f84:	d84a      	bhi.n	800901c <CDC_Control_FS+0xac>
 8008f86:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <CDC_Control_FS+0x1c>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	0800901d 	.word	0x0800901d
 8008f90:	0800901d 	.word	0x0800901d
 8008f94:	0800901d 	.word	0x0800901d
 8008f98:	0800901d 	.word	0x0800901d
 8008f9c:	0800901d 	.word	0x0800901d
 8008fa0:	0800901d 	.word	0x0800901d
 8008fa4:	0800901d 	.word	0x0800901d
 8008fa8:	0800901d 	.word	0x0800901d
 8008fac:	0800901d 	.word	0x0800901d
 8008fb0:	0800901d 	.word	0x0800901d
 8008fb4:	0800901d 	.word	0x0800901d
 8008fb8:	0800901d 	.word	0x0800901d
 8008fbc:	0800901d 	.word	0x0800901d
 8008fc0:	0800901d 	.word	0x0800901d
 8008fc4:	0800901d 	.word	0x0800901d
 8008fc8:	0800901d 	.word	0x0800901d
 8008fcc:	0800901d 	.word	0x0800901d
 8008fd0:	0800901d 	.word	0x0800901d
 8008fd4:	0800901d 	.word	0x0800901d
 8008fd8:	0800901d 	.word	0x0800901d
 8008fdc:	0800901d 	.word	0x0800901d
 8008fe0:	0800901d 	.word	0x0800901d
 8008fe4:	0800901d 	.word	0x0800901d
 8008fe8:	0800901d 	.word	0x0800901d
 8008fec:	0800901d 	.word	0x0800901d
 8008ff0:	0800901d 	.word	0x0800901d
 8008ff4:	0800901d 	.word	0x0800901d
 8008ff8:	0800901d 	.word	0x0800901d
 8008ffc:	0800901d 	.word	0x0800901d
 8009000:	0800901d 	.word	0x0800901d
 8009004:	0800901d 	.word	0x0800901d
 8009008:	0800901d 	.word	0x0800901d
 800900c:	0800901d 	.word	0x0800901d
 8009010:	0800901d 	.word	0x0800901d
 8009014:	0800901d 	.word	0x0800901d
 8009018:	0800901d 	.word	0x0800901d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800901c:	bf00      	nop
  }

  return (USBD_OK);
 800901e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7f7 f8ed 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800903e:	6879      	ldr	r1, [r7, #4]
 8009040:	4805      	ldr	r0, [pc, #20]	; (8009058 <CDC_Receive_FS+0x2c>)
 8009042:	f7fe fdb6 	bl	8007bb2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009046:	4804      	ldr	r0, [pc, #16]	; (8009058 <CDC_Receive_FS+0x2c>)
 8009048:	f7fe fdfc 	bl	8007c44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800904c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	200005fc 	.word	0x200005fc

0800905c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800906c:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <CDC_Transmit_FS+0x48>)
 800906e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009072:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800907e:	2301      	movs	r3, #1
 8009080:	e00b      	b.n	800909a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009082:	887b      	ldrh	r3, [r7, #2]
 8009084:	461a      	mov	r2, r3
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	4806      	ldr	r0, [pc, #24]	; (80090a4 <CDC_Transmit_FS+0x48>)
 800908a:	f7fe fd74 	bl	8007b76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800908e:	4805      	ldr	r0, [pc, #20]	; (80090a4 <CDC_Transmit_FS+0x48>)
 8009090:	f7fe fda8 	bl	8007be4 <USBD_CDC_TransmitPacket>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009098:	7bfb      	ldrb	r3, [r7, #15]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	200005fc 	.word	0x200005fc

080090a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80090ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	371c      	adds	r7, #28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
	...

080090cc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2212      	movs	r2, #18
 80090dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <USBD_CDC_DeviceDescriptor+0x20>)
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	20000168 	.word	0x20000168

080090f0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2204      	movs	r2, #4
 8009100:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009102:	4b03      	ldr	r3, [pc, #12]	; (8009110 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	2000017c 	.word	0x2000017c

08009114 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	6039      	str	r1, [r7, #0]
 800911e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d105      	bne.n	8009132 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	4907      	ldr	r1, [pc, #28]	; (8009148 <USBD_CDC_ProductStrDescriptor+0x34>)
 800912a:	4808      	ldr	r0, [pc, #32]	; (800914c <USBD_CDC_ProductStrDescriptor+0x38>)
 800912c:	f7ff fdf3 	bl	8008d16 <USBD_GetString>
 8009130:	e004      	b.n	800913c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	4904      	ldr	r1, [pc, #16]	; (8009148 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009136:	4805      	ldr	r0, [pc, #20]	; (800914c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009138:	f7ff fded 	bl	8008d16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800913c:	4b02      	ldr	r3, [pc, #8]	; (8009148 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	2000109c 	.word	0x2000109c
 800914c:	08009984 	.word	0x08009984

08009150 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	4904      	ldr	r1, [pc, #16]	; (8009170 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009160:	4804      	ldr	r0, [pc, #16]	; (8009174 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009162:	f7ff fdd8 	bl	8008d16 <USBD_GetString>
  return USBD_StrDesc;
 8009166:	4b02      	ldr	r3, [pc, #8]	; (8009170 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	2000109c 	.word	0x2000109c
 8009174:	0800999c 	.word	0x0800999c

08009178 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	6039      	str	r1, [r7, #0]
 8009182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	221a      	movs	r2, #26
 8009188:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800918a:	f000 f843 	bl	8009214 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800918e:	4b02      	ldr	r3, [pc, #8]	; (8009198 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20000180 	.word	0x20000180

0800919c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	4603      	mov	r3, r0
 80091a4:	6039      	str	r1, [r7, #0]
 80091a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091a8:	79fb      	ldrb	r3, [r7, #7]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d105      	bne.n	80091ba <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	4907      	ldr	r1, [pc, #28]	; (80091d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80091b2:	4808      	ldr	r0, [pc, #32]	; (80091d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80091b4:	f7ff fdaf 	bl	8008d16 <USBD_GetString>
 80091b8:	e004      	b.n	80091c4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	4904      	ldr	r1, [pc, #16]	; (80091d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80091be:	4805      	ldr	r0, [pc, #20]	; (80091d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80091c0:	f7ff fda9 	bl	8008d16 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091c4:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	2000109c 	.word	0x2000109c
 80091d4:	080099b0 	.word	0x080099b0

080091d8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	6039      	str	r1, [r7, #0]
 80091e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d105      	bne.n	80091f6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	4907      	ldr	r1, [pc, #28]	; (800920c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80091ee:	4808      	ldr	r0, [pc, #32]	; (8009210 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80091f0:	f7ff fd91 	bl	8008d16 <USBD_GetString>
 80091f4:	e004      	b.n	8009200 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	4904      	ldr	r1, [pc, #16]	; (800920c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80091fa:	4805      	ldr	r0, [pc, #20]	; (8009210 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80091fc:	f7ff fd8b 	bl	8008d16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009200:	4b02      	ldr	r3, [pc, #8]	; (800920c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	2000109c 	.word	0x2000109c
 8009210:	080099bc 	.word	0x080099bc

08009214 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800921a:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <Get_SerialNum+0x44>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009220:	4b0e      	ldr	r3, [pc, #56]	; (800925c <Get_SerialNum+0x48>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009226:	4b0e      	ldr	r3, [pc, #56]	; (8009260 <Get_SerialNum+0x4c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4413      	add	r3, r2
 8009232:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d009      	beq.n	800924e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800923a:	2208      	movs	r2, #8
 800923c:	4909      	ldr	r1, [pc, #36]	; (8009264 <Get_SerialNum+0x50>)
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 f814 	bl	800926c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009244:	2204      	movs	r2, #4
 8009246:	4908      	ldr	r1, [pc, #32]	; (8009268 <Get_SerialNum+0x54>)
 8009248:	68b8      	ldr	r0, [r7, #8]
 800924a:	f000 f80f 	bl	800926c <IntToUnicode>
  }
}
 800924e:	bf00      	nop
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	1fff7590 	.word	0x1fff7590
 800925c:	1fff7594 	.word	0x1fff7594
 8009260:	1fff7598 	.word	0x1fff7598
 8009264:	20000182 	.word	0x20000182
 8009268:	20000192 	.word	0x20000192

0800926c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]
 8009282:	e027      	b.n	80092d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	0f1b      	lsrs	r3, r3, #28
 8009288:	2b09      	cmp	r3, #9
 800928a:	d80b      	bhi.n	80092a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	0f1b      	lsrs	r3, r3, #28
 8009290:	b2da      	uxtb	r2, r3
 8009292:	7dfb      	ldrb	r3, [r7, #23]
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	4619      	mov	r1, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	440b      	add	r3, r1
 800929c:	3230      	adds	r2, #48	; 0x30
 800929e:	b2d2      	uxtb	r2, r2
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	e00a      	b.n	80092ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	0f1b      	lsrs	r3, r3, #28
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	4619      	mov	r1, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	440b      	add	r3, r1
 80092b4:	3237      	adds	r2, #55	; 0x37
 80092b6:	b2d2      	uxtb	r2, r2
 80092b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	3301      	adds	r3, #1
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	4413      	add	r3, r2
 80092ca:	2200      	movs	r2, #0
 80092cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	3301      	adds	r3, #1
 80092d2:	75fb      	strb	r3, [r7, #23]
 80092d4:	7dfa      	ldrb	r2, [r7, #23]
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d3d3      	bcc.n	8009284 <IntToUnicode+0x18>
  }
}
 80092dc:	bf00      	nop
 80092de:	bf00      	nop
 80092e0:	371c      	adds	r7, #28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
	...

080092ec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b094      	sub	sp, #80	; 0x50
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80092f4:	f107 030c 	add.w	r3, r7, #12
 80092f8:	2244      	movs	r2, #68	; 0x44
 80092fa:	2100      	movs	r1, #0
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fb2d 	bl	800995c <memset>
  if(pcdHandle->Instance==USB)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a15      	ldr	r2, [pc, #84]	; (800935c <HAL_PCD_MspInit+0x70>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d122      	bne.n	8009352 <HAL_PCD_MspInit+0x66>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800930c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009310:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009312:	2300      	movs	r3, #0
 8009314:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009316:	f107 030c 	add.w	r3, r7, #12
 800931a:	4618      	mov	r0, r3
 800931c:	f7fa fc1a 	bl	8003b54 <HAL_RCCEx_PeriphCLKConfig>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009326:	f7f7 fb97 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800932a:	4b0d      	ldr	r3, [pc, #52]	; (8009360 <HAL_PCD_MspInit+0x74>)
 800932c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932e:	4a0c      	ldr	r2, [pc, #48]	; (8009360 <HAL_PCD_MspInit+0x74>)
 8009330:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009334:	6593      	str	r3, [r2, #88]	; 0x58
 8009336:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <HAL_PCD_MspInit+0x74>)
 8009338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800933a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800933e:	60bb      	str	r3, [r7, #8]
 8009340:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009342:	2200      	movs	r2, #0
 8009344:	2100      	movs	r1, #0
 8009346:	2014      	movs	r0, #20
 8009348:	f7f7 ff37 	bl	80011ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800934c:	2014      	movs	r0, #20
 800934e:	f7f7 ff4e 	bl	80011ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009352:	bf00      	nop
 8009354:	3750      	adds	r7, #80	; 0x50
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	40005c00 	.word	0x40005c00
 8009360:	40021000 	.word	0x40021000

08009364 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f7fe fd2e 	bl	8007ddc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800939a:	78fa      	ldrb	r2, [r7, #3]
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	00db      	lsls	r3, r3, #3
 80093a6:	440b      	add	r3, r1
 80093a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	4619      	mov	r1, r3
 80093b2:	f7fe fd68 	bl	8007e86 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80093b6:	bf00      	nop
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80093d0:	78fa      	ldrb	r2, [r7, #3]
 80093d2:	6879      	ldr	r1, [r7, #4]
 80093d4:	4613      	mov	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	440b      	add	r3, r1
 80093de:	333c      	adds	r3, #60	; 0x3c
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	78fb      	ldrb	r3, [r7, #3]
 80093e4:	4619      	mov	r1, r3
 80093e6:	f7fe fdb1 	bl	8007f4c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009400:	4618      	mov	r0, r3
 8009402:	f7fe fec5 	bl	8008190 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009406:	bf00      	nop
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009416:	2301      	movs	r3, #1
 8009418:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	2b02      	cmp	r3, #2
 8009420:	d001      	beq.n	8009426 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009422:	f7f7 fb19 	bl	8000a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800942c:	7bfa      	ldrb	r2, [r7, #15]
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe fe6f 	bl	8008114 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe fe1b 	bl	8008078 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009442:	bf00      	nop
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe fe6a 	bl	8008134 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d005      	beq.n	8009474 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009468:	4b04      	ldr	r3, [pc, #16]	; (800947c <HAL_PCD_SuspendCallback+0x30>)
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	4a03      	ldr	r2, [pc, #12]	; (800947c <HAL_PCD_SuspendCallback+0x30>)
 800946e:	f043 0306 	orr.w	r3, r3, #6
 8009472:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	e000ed00 	.word	0xe000ed00

08009480 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009490:	4b08      	ldr	r3, [pc, #32]	; (80094b4 <HAL_PCD_ResumeCallback+0x34>)
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	4a07      	ldr	r2, [pc, #28]	; (80094b4 <HAL_PCD_ResumeCallback+0x34>)
 8009496:	f023 0306 	bic.w	r3, r3, #6
 800949a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800949c:	f000 f9fa 	bl	8009894 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fe5a 	bl	8008160 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	e000ed00 	.word	0xe000ed00

080094b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80094c0:	4a2b      	ldr	r2, [pc, #172]	; (8009570 <USBD_LL_Init+0xb8>)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a29      	ldr	r2, [pc, #164]	; (8009570 <USBD_LL_Init+0xb8>)
 80094cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80094d0:	4b27      	ldr	r3, [pc, #156]	; (8009570 <USBD_LL_Init+0xb8>)
 80094d2:	4a28      	ldr	r2, [pc, #160]	; (8009574 <USBD_LL_Init+0xbc>)
 80094d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80094d6:	4b26      	ldr	r3, [pc, #152]	; (8009570 <USBD_LL_Init+0xb8>)
 80094d8:	2208      	movs	r2, #8
 80094da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80094dc:	4b24      	ldr	r3, [pc, #144]	; (8009570 <USBD_LL_Init+0xb8>)
 80094de:	2202      	movs	r2, #2
 80094e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094e2:	4b23      	ldr	r3, [pc, #140]	; (8009570 <USBD_LL_Init+0xb8>)
 80094e4:	2202      	movs	r2, #2
 80094e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80094e8:	4b21      	ldr	r3, [pc, #132]	; (8009570 <USBD_LL_Init+0xb8>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80094ee:	4b20      	ldr	r3, [pc, #128]	; (8009570 <USBD_LL_Init+0xb8>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80094f4:	4b1e      	ldr	r3, [pc, #120]	; (8009570 <USBD_LL_Init+0xb8>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80094fa:	4b1d      	ldr	r3, [pc, #116]	; (8009570 <USBD_LL_Init+0xb8>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009500:	481b      	ldr	r0, [pc, #108]	; (8009570 <USBD_LL_Init+0xb8>)
 8009502:	f7f8 f843 	bl	800158c <HAL_PCD_Init>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800950c:	f7f7 faa4 	bl	8000a58 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009516:	2318      	movs	r3, #24
 8009518:	2200      	movs	r2, #0
 800951a:	2100      	movs	r1, #0
 800951c:	f7f9 fcfc 	bl	8002f18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009526:	2358      	movs	r3, #88	; 0x58
 8009528:	2200      	movs	r2, #0
 800952a:	2180      	movs	r1, #128	; 0x80
 800952c:	f7f9 fcf4 	bl	8002f18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009536:	23c0      	movs	r3, #192	; 0xc0
 8009538:	2200      	movs	r2, #0
 800953a:	2181      	movs	r1, #129	; 0x81
 800953c:	f7f9 fcec 	bl	8002f18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009546:	f44f 7388 	mov.w	r3, #272	; 0x110
 800954a:	2200      	movs	r2, #0
 800954c:	2101      	movs	r1, #1
 800954e:	f7f9 fce3 	bl	8002f18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800955c:	2200      	movs	r2, #0
 800955e:	2182      	movs	r1, #130	; 0x82
 8009560:	f7f9 fcda 	bl	8002f18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	2000129c 	.word	0x2000129c
 8009574:	40005c00 	.word	0x40005c00

08009578 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800958e:	4618      	mov	r0, r3
 8009590:	f7f8 f8e1 	bl	8001756 <HAL_PCD_Start>
 8009594:	4603      	mov	r3, r0
 8009596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f980 	bl	80098a0 <USBD_Get_USB_Status>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	4608      	mov	r0, r1
 80095b8:	4611      	mov	r1, r2
 80095ba:	461a      	mov	r2, r3
 80095bc:	4603      	mov	r3, r0
 80095be:	70fb      	strb	r3, [r7, #3]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70bb      	strb	r3, [r7, #2]
 80095c4:	4613      	mov	r3, r2
 80095c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095d6:	78bb      	ldrb	r3, [r7, #2]
 80095d8:	883a      	ldrh	r2, [r7, #0]
 80095da:	78f9      	ldrb	r1, [r7, #3]
 80095dc:	f7f8 fa29 	bl	8001a32 <HAL_PCD_EP_Open>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 f95a 	bl	80098a0 <USBD_Get_USB_Status>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	460b      	mov	r3, r1
 8009604:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009614:	78fa      	ldrb	r2, [r7, #3]
 8009616:	4611      	mov	r1, r2
 8009618:	4618      	mov	r0, r3
 800961a:	f7f8 fa70 	bl	8001afe <HAL_PCD_EP_Close>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	4618      	mov	r0, r3
 8009626:	f000 f93b 	bl	80098a0 <USBD_Get_USB_Status>
 800962a:	4603      	mov	r3, r0
 800962c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800962e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7f8 fb31 	bl	8001cbe <HAL_PCD_EP_SetStall>
 800965c:	4603      	mov	r3, r0
 800965e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f91c 	bl	80098a0 <USBD_Get_USB_Status>
 8009668:	4603      	mov	r3, r0
 800966a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966c:	7bbb      	ldrb	r3, [r7, #14]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	4611      	mov	r1, r2
 8009694:	4618      	mov	r0, r3
 8009696:	f7f8 fb64 	bl	8001d62 <HAL_PCD_EP_ClrStall>
 800969a:	4603      	mov	r3, r0
 800969c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 f8fd 	bl	80098a0 <USBD_Get_USB_Status>
 80096a6:	4603      	mov	r3, r0
 80096a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	da0c      	bge.n	80096ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096d0:	78fb      	ldrb	r3, [r7, #3]
 80096d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d6:	68f9      	ldr	r1, [r7, #12]
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	440b      	add	r3, r1
 80096e4:	3302      	adds	r3, #2
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	e00b      	b.n	8009702 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096f0:	68f9      	ldr	r1, [r7, #12]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	440b      	add	r3, r1
 80096fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009700:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	460b      	mov	r3, r1
 8009718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f7f8 f95b 	bl	80019e8 <HAL_PCD_SetAddress>
 8009732:	4603      	mov	r3, r0
 8009734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	4618      	mov	r0, r3
 800973a:	f000 f8b1 	bl	80098a0 <USBD_Get_USB_Status>
 800973e:	4603      	mov	r3, r0
 8009740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009742:	7bbb      	ldrb	r3, [r7, #14]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	607a      	str	r2, [r7, #4]
 8009756:	603b      	str	r3, [r7, #0]
 8009758:	460b      	mov	r3, r1
 800975a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800976a:	7af9      	ldrb	r1, [r7, #11]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	f7f8 fa62 	bl	8001c38 <HAL_PCD_EP_Transmit>
 8009774:	4603      	mov	r3, r0
 8009776:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009778:	7dfb      	ldrb	r3, [r7, #23]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 f890 	bl	80098a0 <USBD_Get_USB_Status>
 8009780:	4603      	mov	r3, r0
 8009782:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009784:	7dbb      	ldrb	r3, [r7, #22]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b086      	sub	sp, #24
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
 800979a:	460b      	mov	r3, r1
 800979c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097ac:	7af9      	ldrb	r1, [r7, #11]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	f7f8 f9ec 	bl	8001b8e <HAL_PCD_EP_Receive>
 80097b6:	4603      	mov	r3, r0
 80097b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 f86f 	bl	80098a0 <USBD_Get_USB_Status>
 80097c2:	4603      	mov	r3, r0
 80097c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097e2:	78fa      	ldrb	r2, [r7, #3]
 80097e4:	4611      	mov	r1, r2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7f8 fa0e 	bl	8001c08 <HAL_PCD_EP_GetRxCount>
 80097ec:	4603      	mov	r3, r0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
	...

080097f8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009804:	78fb      	ldrb	r3, [r7, #3]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <HAL_PCDEx_LPM_Callback+0x18>
 800980a:	2b01      	cmp	r3, #1
 800980c:	d013      	beq.n	8009836 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800980e:	e023      	b.n	8009858 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d007      	beq.n	8009828 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009818:	f000 f83c 	bl	8009894 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800981c:	4b10      	ldr	r3, [pc, #64]	; (8009860 <HAL_PCDEx_LPM_Callback+0x68>)
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	4a0f      	ldr	r2, [pc, #60]	; (8009860 <HAL_PCDEx_LPM_Callback+0x68>)
 8009822:	f023 0306 	bic.w	r3, r3, #6
 8009826:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe fc96 	bl	8008160 <USBD_LL_Resume>
    break;
 8009834:	e010      	b.n	8009858 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800983c:	4618      	mov	r0, r3
 800983e:	f7fe fc79 	bl	8008134 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d005      	beq.n	8009856 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <HAL_PCDEx_LPM_Callback+0x68>)
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	4a04      	ldr	r2, [pc, #16]	; (8009860 <HAL_PCDEx_LPM_Callback+0x68>)
 8009850:	f043 0306 	orr.w	r3, r3, #6
 8009854:	6113      	str	r3, [r2, #16]
    break;
 8009856:	bf00      	nop
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	e000ed00 	.word	0xe000ed00

08009864 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800986c:	4b03      	ldr	r3, [pc, #12]	; (800987c <USBD_static_malloc+0x18>)
}
 800986e:	4618      	mov	r0, r3
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	200001c4 	.word	0x200001c4

08009880 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]

}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009898:	f7f6 fd7c 	bl	8000394 <SystemClock_Config>
}
 800989c:	bf00      	nop
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d817      	bhi.n	80098e4 <USBD_Get_USB_Status+0x44>
 80098b4:	a201      	add	r2, pc, #4	; (adr r2, 80098bc <USBD_Get_USB_Status+0x1c>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	080098cd 	.word	0x080098cd
 80098c0:	080098d3 	.word	0x080098d3
 80098c4:	080098d9 	.word	0x080098d9
 80098c8:	080098df 	.word	0x080098df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73fb      	strb	r3, [r7, #15]
    break;
 80098d0:	e00b      	b.n	80098ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098d2:	2303      	movs	r3, #3
 80098d4:	73fb      	strb	r3, [r7, #15]
    break;
 80098d6:	e008      	b.n	80098ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098d8:	2301      	movs	r3, #1
 80098da:	73fb      	strb	r3, [r7, #15]
    break;
 80098dc:	e005      	b.n	80098ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098de:	2303      	movs	r3, #3
 80098e0:	73fb      	strb	r3, [r7, #15]
    break;
 80098e2:	e002      	b.n	80098ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80098e4:	2303      	movs	r3, #3
 80098e6:	73fb      	strb	r3, [r7, #15]
    break;
 80098e8:	bf00      	nop
  }
  return usb_status;
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <__libc_init_array>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	4d0d      	ldr	r5, [pc, #52]	; (8009930 <__libc_init_array+0x38>)
 80098fc:	4c0d      	ldr	r4, [pc, #52]	; (8009934 <__libc_init_array+0x3c>)
 80098fe:	1b64      	subs	r4, r4, r5
 8009900:	10a4      	asrs	r4, r4, #2
 8009902:	2600      	movs	r6, #0
 8009904:	42a6      	cmp	r6, r4
 8009906:	d109      	bne.n	800991c <__libc_init_array+0x24>
 8009908:	4d0b      	ldr	r5, [pc, #44]	; (8009938 <__libc_init_array+0x40>)
 800990a:	4c0c      	ldr	r4, [pc, #48]	; (800993c <__libc_init_array+0x44>)
 800990c:	f000 f82e 	bl	800996c <_init>
 8009910:	1b64      	subs	r4, r4, r5
 8009912:	10a4      	asrs	r4, r4, #2
 8009914:	2600      	movs	r6, #0
 8009916:	42a6      	cmp	r6, r4
 8009918:	d105      	bne.n	8009926 <__libc_init_array+0x2e>
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009920:	4798      	blx	r3
 8009922:	3601      	adds	r6, #1
 8009924:	e7ee      	b.n	8009904 <__libc_init_array+0xc>
 8009926:	f855 3b04 	ldr.w	r3, [r5], #4
 800992a:	4798      	blx	r3
 800992c:	3601      	adds	r6, #1
 800992e:	e7f2      	b.n	8009916 <__libc_init_array+0x1e>
 8009930:	080099dc 	.word	0x080099dc
 8009934:	080099dc 	.word	0x080099dc
 8009938:	080099dc 	.word	0x080099dc
 800993c:	080099e0 	.word	0x080099e0

08009940 <memcpy>:
 8009940:	440a      	add	r2, r1
 8009942:	4291      	cmp	r1, r2
 8009944:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009948:	d100      	bne.n	800994c <memcpy+0xc>
 800994a:	4770      	bx	lr
 800994c:	b510      	push	{r4, lr}
 800994e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009956:	4291      	cmp	r1, r2
 8009958:	d1f9      	bne.n	800994e <memcpy+0xe>
 800995a:	bd10      	pop	{r4, pc}

0800995c <memset>:
 800995c:	4402      	add	r2, r0
 800995e:	4603      	mov	r3, r0
 8009960:	4293      	cmp	r3, r2
 8009962:	d100      	bne.n	8009966 <memset+0xa>
 8009964:	4770      	bx	lr
 8009966:	f803 1b01 	strb.w	r1, [r3], #1
 800996a:	e7f9      	b.n	8009960 <memset+0x4>

0800996c <_init>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	bf00      	nop
 8009970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009972:	bc08      	pop	{r3}
 8009974:	469e      	mov	lr, r3
 8009976:	4770      	bx	lr

08009978 <_fini>:
 8009978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997a:	bf00      	nop
 800997c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997e:	bc08      	pop	{r3}
 8009980:	469e      	mov	lr, r3
 8009982:	4770      	bx	lr
